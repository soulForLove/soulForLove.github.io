<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>林林总总</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.linzhongtai.cn/"/>
  <updated>2020-03-02T14:05:55.000Z</updated>
  <id>http://blog.linzhongtai.cn/</id>
  
  <author>
    <name>Soul</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>4、索引</title>
    <link href="http://blog.linzhongtai.cn/2020/03/4%E3%80%81%E7%B4%A2%E5%BC%95/"/>
    <id>http://blog.linzhongtai.cn/2020/03/4、索引/</id>
    <published>2020-03-02T14:05:55.000Z</published>
    <updated>2020-03-02T14:05:55.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="索引的常见模型"><a href="#索引的常见模型" class="headerlink" title="索引的常见模型"></a>索引的常见模型</h2><h3 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h3><blockquote><p>适用于只有等值查询的场景</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/5937589-8bd9eab946f6fa24.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="哈希表示意图"><br>以键-值（key-value）存储数据的结构，只要输入待查找的值即key，就可以找到其对应的值即Value。哈希的思路很简单，把值放在数组里，用一个哈希函数把key换算成一个确定的位置，然后把value放在数组的这个位置。<br>多个key值经过哈希函数的换算，可能会出现同一个值的情况。此时会拉出一个链表（不是有序的，所以做区间查询的速度很慢）。</p><h3 id="有序数组"><a href="#有序数组" class="headerlink" title="有序数组"></a>有序数组</h3><blockquote><p>在等值查询和范围查询场景中的性能就都非常优秀，当更新的成本太高，所以只适用于静态存储引擎</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/5937589-193bfdabab7faf09.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="有序数组示意图"></p><h3 id="搜索树"><a href="#搜索树" class="headerlink" title="搜索树"></a>搜索树</h3><p><img src="https://upload-images.jianshu.io/upload_images/5937589-e326cfb5caa507d1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="二叉搜索树示意图"></p><ul><li>每个节点的左儿子小于父节点，父节点又小于右儿子</li><li>查询时间复杂度O(log(N))，更新时间复杂度O(log(N))</li><li>数据库存储大多不适用二叉树，因为树高过高，会适用N叉树</li></ul><p>在MySQL中，索引是在存储引擎层实现的，所以并没有统一的索引标准，即不同存储引擎的索引的工作方式并不一样。而即使多个存储引擎支持同一种类型的索引，其底层的实现也可能不同。由于InnoDB存储引擎在MySQL数据库中使用最为广泛，所以下面以InnoDB为例，分析一下其中的索引模型。</p><h2 id="InnoDB-的索引模型"><a href="#InnoDB-的索引模型" class="headerlink" title="InnoDB 的索引模型"></a>InnoDB 的索引模型</h2><blockquote><p>在InnoDB中，表都是根据主键顺序以索引的形式存放的，这种存储方式的表称为索引组织表。又因为前面我们提到的，InnoDB使用了B+树索引模型，所以数据都是存储在B+树中的。</p></blockquote><p>每一个索引在InnoDB里面对应一棵B+树。</p><p>假设，我们有一个主键列为ID的表，表中有字段k，并且在k上有索引。<br>这个表的建表语句是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create table T(</span><br><span class="line">id int primary key, </span><br><span class="line">k int not null, </span><br><span class="line">name varchar(16),</span><br><span class="line">index (k))engine=InnoDB;</span><br></pre></td></tr></table></figure></p><p>表中R1~R5的(ID,k)值分别为(100,1)、(200,2)、(300,3)、(500,5)和(600,6)，两棵树的示例示意图如下。<br><img src="https://upload-images.jianshu.io/upload_images/5937589-23d9999932dc57ed.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="InnoDB的索引组织结构"></p><p>从图中不难看出，根据叶子节点的内容，索引类型分为主键索引和非主键索引。<br>主键索引的叶子节点存的是整行数据。在InnoDB里，主键索引也被称为聚簇索引（clustered index）。<br>非主键索引的叶子节点内容是主键的值。在InnoDB里，非主键索引也被称为二级索引（secondary index）。<br>根据上面的索引结构说明，我们来讨论一个问题：<strong>基于主键索引和普通索引的查询有什么区别？</strong></p><ul><li>如果语句是select * from T where ID=500，即主键查询方式，则只需要搜索ID这棵B+树；</li><li>如果语句是select * from T where k=5，即普通索引查询方式，则需要先搜索k索引树，得到ID的值为500，再到ID索引树搜索一次。这个过程称为回表。</li></ul><p>也就是说，基于非主键索引的查询需要多扫描一棵索引树。因此，我们在应用中应该尽量使用主键查询。</p><h2 id="索引维护"><a href="#索引维护" class="headerlink" title="索引维护"></a>索引维护</h2><p>B+树为了维护索引有序性，在插入新值的时候需要做必要的维护。以上面这个图为例，如果插入新的行ID值为700，则只需要在R5的记录后面插入一个新记录。如果新插入的ID值为400，就相对麻烦了，需要逻辑上挪动后面的数据，空出位置。<br>而更糟的情况是，如果R5所在的数据页已经满了，根据B+树的算法，这时候需要申请一个新的数据页，然后挪动部分数据过去。这个过程称为页分裂。在这种情况下，性能自然会受影响。<br>除了性能外，页分裂操作还影响数据页的利用率。原本放在一个页的数据，现在分到两个页中，整体空间利用率降低大约50%。<br>当然有分裂就有合并。当相邻两个页由于删除了数据，利用率很低之后，会将数据页做合并。合并的过程，可以认为是分裂过程的逆过程。</p><ul><li>你可能在一些建表规范里面见到过类似的描述，要求建表语句里一定要有自增主键。当然事无绝对，我们来分析一下哪些场景下应该使用自增主键，而哪些场景下不应该</li></ul><p>自增主键是指自增列上定义的主键，在建表语句中一般是这么定义的： NOT NULL PRIMARY KEY AUTO_INCREMENT。</p><p>插入新记录的时候可以不指定ID的值，系统会获取当前ID最大值加1作为下一条记录的ID值。<br>自增主键的插入数据模式，正符合了我们前面提到的递增插入的场景。每次插入一条新记录，都是追加操作，都不涉及到挪动其他记录，也不会触发叶子节点的分裂。<br><strong>而有业务逻辑的字段做主键，则往往不容易保证有序插入，这样写数据成本相对较高。</strong></p><ul><li>除了考虑性能外，我们还可以从存储空间的角度来看。假设你的表中确实有一个唯一字段，比如字符串类型的身份证号，那应该用身份证号做主键，还是用自增字段做主键呢？</li></ul><p>由于每个非主键索引的叶子节点上都是主键的值。如果用身份证号做主键，那么每个二级索引的叶子节点占用约20个字节，而如果用整型做主键，则只要4个字节，如果是长整型（bigint）则是8个字节。<br><strong>显然，主键长度越小，普通索引的叶子节点就越小，普通索引占用的空间也就越小。</strong></p><p><strong>所以，从性能和存储空间方面考量，自增主键往往是更合理的选择。</strong></p><ul><li>有没有什么场景适合用业务字段直接做主键的呢？还是有的。比如，有些业务的场景需求是这样的：</li></ul><ol><li>只有一个索引；</li><li>该索引必须是唯一索引。</li></ol><p>这就是典型的KV场景，由于没有其他索引，所以也就不用考虑其他索引的叶子节点大小的问题。<br>这时候我们就要优先考虑上一段提到的“尽量使用主键查询”原则，直接将这个索引设置为主键，可以避免每次查询需要搜索两棵树。</p><h2 id="深入索引"><a href="#深入索引" class="headerlink" title="深入索引"></a>深入索引</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create table T (</span><br><span class="line">ID int primary key,</span><br><span class="line">k int NOT NULL DEFAULT 0, </span><br><span class="line">s varchar(16) NOT NULL DEFAULT &apos;&apos;,</span><br><span class="line">index k(k))</span><br><span class="line">engine=InnoDB;</span><br><span class="line"></span><br><span class="line">insert into T values(100,1, &apos;aa&apos;),(200,2,&apos;bb&apos;),(300,3,&apos;cc&apos;),(500,5,&apos;ee&apos;),(600,6,&apos;ff&apos;),(700,7,&apos;gg&apos;);</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/5937589-1a5da5b9c83c241a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="InnoDB的索引组织结构"></p><p>如果执行 select * from T where k between 3 and 5，需要执行几次树的搜索操作，会扫描多少行？</p><p>这条SQL查询语句的执行流程：</p><ol><li>在k索引树上找到k=3的记录，取得 ID = 300；</li><li>再到ID索引树查到ID=300对应的R3；</li><li>在k索引树取下一个值k=5，取得ID=500；</li><li>再回到ID索引树查到ID=500对应的R4；</li><li>在k索引树取下一个值k=6，不满足条件，循环结束。</li></ol><p>在这个过程中，回到主键索引树搜索的过程，我们称为回表。可以看到，这个查询过程读了k索引树的3条记录（步骤1、3和5），回表了两次（步骤2和4）。<br>在这个例子中，由于查询结果所需要的数据只在主键索引上有，所以不得不回表。那么，<strong>有没有可能经过索引优化，避免回表过程呢？</strong></p><h3 id="覆盖索引"><a href="#覆盖索引" class="headerlink" title="覆盖索引"></a>覆盖索引</h3><blockquote><p>由于覆盖索引可以减少树的搜索次数，显著提升查询性能，所以使用覆盖索引是一个常用的性能优化手段。</p></blockquote><p>如果执行的语句是select ID from T where k between 3 and 5，这时只需要查ID的值，而ID的值已经在k索引树上了，因此可以直接提供查询结果，不需要回表。也就是说，在这个查询里面，索引k已经“覆盖了”我们的查询需求，我们称为覆盖索引。</p><h3 id="最左前缀原则"><a href="#最左前缀原则" class="headerlink" title="最左前缀原则"></a>最左前缀原则</h3><blockquote><p>B+树这种索引结构，可以利用索引的“最左前缀”，来定位记录。</p></blockquote><p>为了直观地说明这个概念，我们用（name，age）这个联合索引来分析。<br><img src="https://upload-images.jianshu.io/upload_images/5937589-cc416b738ad436b5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="（name，age）索引示意图"></p><p><strong>在建立联合索引的时候，如何安排索引内的字段顺序?</strong></p><ul><li>索引的复用能力<br>因为可以支持最左前缀，所以当已经有了(a,b)这个联合索引后，一般就不需要单独在a上建立索引了<br><strong>如果通过调整顺序，可以少维护一个索引，那么这个顺序往往就是需要优先考虑采用的。</strong></li></ul><p>如果既有联合查询，又有基于a、b各自的查询呢？查询条件里面只有b的语句，是无法使用(a,b)这个联合索引的，这时候不得不维护另外一个索引，也就是说需要同时维护(a,b)、(b) 这两个索引。</p><p>这时候，要考虑的原则就是空间了。比如上面这个市民表的情况，name字段是比age字段大的 ，那么则建议创建一个（name,age)的联合索引和一个(age)的单字段索引。</p><h3 id="索引下推"><a href="#索引下推" class="headerlink" title="索引下推"></a>索引下推</h3><p>以市民表的联合索引（name, age）为例。如果现在有一个需求：检索出表中“名字第一个字是张，而且年龄是10岁的所有男孩”。那么，SQL语句是这么写的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from tuser where name like &apos;张%&apos; and age=10 and ismale=1;</span><br></pre></td></tr></table></figure></p><p>在MySQL 5.6之前，只能从ID3开始一个个回表。到主键索引上找出数据行，再对比字段值。<br><img src="https://upload-images.jianshu.io/upload_images/5937589-c75f4110ce8c98be.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="无索引下推执行流程"><br>而MySQL 5.6 引入的索引下推优化（index condition pushdown)， 可以在索引遍历过程中，对索引中包含的字段先做判断，直接过滤掉不满足条件的记录，减少回表次数。<br><img src="https://upload-images.jianshu.io/upload_images/5937589-92f6fc80c4e22eb3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="索引下推执行流程"></p><p>以上这两个图里面，每一个虚线箭头表示回表一次。</p><p>无索引下推的图中，在(name,age)索引里面特意去掉了age的值，这个过程InnoDB并不会去看age的值，只是按顺序把“name第一个字是’张’”的记录一条条取出来回表。因此，需要回表4次。</p><p>而在索引下推的图中，InnoDB在(name,age)索引内部就判断了age是否等于10，对于不等于10的记录，直接判断并跳过。在这个例子中，只需要对ID4、ID5这两条记录回表取数据判断，就只需要回表2次。</p>]]></content>
    
    <summary type="html">
    
      索引的出现其实就是为了提高数据查询的效率，就像书的目录一样。
    
    </summary>
    
      <category term="Mysql" scheme="http://blog.linzhongtai.cn/categories/Mysql/"/>
    
    
      <category term="Mysql" scheme="http://blog.linzhongtai.cn/tags/Mysql/"/>
    
      <category term="MySql实战45讲笔记" scheme="http://blog.linzhongtai.cn/tags/MySql%E5%AE%9E%E6%88%9845%E8%AE%B2%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>3、事务隔离</title>
    <link href="http://blog.linzhongtai.cn/2020/03/3%E3%80%81%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB/"/>
    <id>http://blog.linzhongtai.cn/2020/03/3、事务隔离/</id>
    <published>2020-03-01T02:53:56.000Z</published>
    <updated>2020-03-01T02:53:56.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="隔离性与隔离级别"><a href="#隔离性与隔离级别" class="headerlink" title="隔离性与隔离级别"></a>隔离性与隔离级别</h2><ol><li>事务的特性：原子性、一致性、隔离性、持久性</li><li>多事务同时执行的时候，可能会出现的问题：脏读、不可重复读、幻读</li><li>事务隔离级别：读未提交、读提交、可重复读、串行化</li><li>不同事务隔离级别的区别：</li></ol><ul><li>读未提交：一个事务还未提交，它所做的变更就可以被别的事务看到</li><li>读提交：一个事务提交之后，它所做的变更才可以被别的事务看到</li><li>可重复读：一个事务执行过程中看到的数据是一致的。未提交的更改对其他事务是不可见的</li><li>串行化：对应一个记录会加读写锁，出现冲突的时候，后访问的事务必须等前一个事务执行完成才能继续执行</li></ul><ol start="5"><li>配置方法：启动参数transaction-isolation</li></ol><h2 id="事务隔离的实现"><a href="#事务隔离的实现" class="headerlink" title="事务隔离的实现"></a>事务隔离的实现</h2><p>每条记录在更新的时候都会同时记录一条回滚操作。同一条记录在系统中可以存在多个版本，这就是数据库的多版本并发控制（MVCC）。</p><ol><li>回滚日志什么时候删除？系统会判断当没有事务需要用到这些回滚日志的时候，回滚日志会被删除。</li><li>什么时候不需要了？当系统里么有比这个回滚日志更早的read-view的时候。</li><li>为什么尽量不要使用长事务。长事务意味着系统里面会存在很老的事务视图，在这个事务提交之前，回滚记录都要保留，这会导致大量占用存储空间。除此之外，长事务还占用锁资源，可能会拖垮库。</li></ol><h2 id="事务启动方式"><a href="#事务启动方式" class="headerlink" title="事务启动方式"></a>事务启动方式</h2><ol><li>显式启动事务语句，begin或者start transaction,提交commit，回滚rollback；</li><li>set autocommit=0，该命令会把这个线程的自动提交关掉。这样只要执行一个select语句，事务就启动，并不会自动提交，直到主动执行commit或rollback或断开连接。</li></ol><p>如果考虑多一次交互问题，可以使用commit work and chain语法。在autocommit为1的情况下，用begin显式启动的事务，如果执行commit则提交事务。如果执行 commit work and chain，则是提交事务并自动启动下一个事务，这样也省去了再次执行begin语句的开销。同时带来的好处是从程序开发的角度明确地知道每个语句是否处于事务中。<br>在information_schema库的innodb_trx这个表中查询长事务，比如下面这个语句，用于查找持续时间超过60s的事务。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select * from information_schema.innodb_trx </span><br><span class="line">where TIME_TO_SEC(timediff(now(),trx_started))&gt;60</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      ACID（Atomicity、Consistency、Isolation、Durability，即原子性、一致性、隔离性、持久性）
    
    </summary>
    
      <category term="Mysql" scheme="http://blog.linzhongtai.cn/categories/Mysql/"/>
    
    
      <category term="Mysql" scheme="http://blog.linzhongtai.cn/tags/Mysql/"/>
    
      <category term="MySql实战45讲笔记" scheme="http://blog.linzhongtai.cn/tags/MySql%E5%AE%9E%E6%88%9845%E8%AE%B2%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>2、更新语句的执行以及日志</title>
    <link href="http://blog.linzhongtai.cn/2020/02/2%E3%80%81%E6%9B%B4%E6%96%B0%E8%AF%AD%E5%8F%A5%E7%9A%84%E6%89%A7%E8%A1%8C%E4%BB%A5%E5%8F%8A%E6%97%A5%E5%BF%97/"/>
    <id>http://blog.linzhongtai.cn/2020/02/2、更新语句的执行以及日志/</id>
    <published>2020-02-28T07:11:53.000Z</published>
    <updated>2020-02-28T07:11:53.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p><img src="https://upload-images.jianshu.io/upload_images/5937589-be3493a2aa3950e7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="执行流程"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; update T set c=c+1 where ID=2;</span><br></pre></td></tr></table></figure></p><p>执行语句前要先连接数据库，这是连接器的工作。</p><p>前面我们说过，在一个表上有更新的时候，跟这个表有关的查询缓存会失效，所以这条语句就会把表T上所有缓存结果都清空。这也就是我们一般不建议使用查询缓存的原因。</p><p>接下来，分析器会通过词法和语法解析知道这是一条更新语句。优化器决定要使用ID这个索引。然后，执行器负责具体执行，找到这一行，然后更新。</p><p>与查询流程不一样的是，更新流程还涉及两个重要的日志模块，它们正是我们今天要讨论的主角：<strong>redo log（重做日志）和 binlog（归档日志）</strong>。</p><h2 id="重要的日志模块：redo-log"><a href="#重要的日志模块：redo-log" class="headerlink" title="重要的日志模块：redo log"></a>重要的日志模块：redo log</h2><p>当有一条记录需要更新的时候，InnoDB引擎就会先把记录写到redo log（粉板）里面，并更新内存，这个时候更新就算完成了。同时，InnoDB引擎会在适当的时候，将这个操作记录更新到磁盘里面，而这个更新往往是在系统比较空闲的时候做。<br>InnoDB的redo log是固定大小的，比如可以配置为一组4个文件，每个文件的大小是1GB，那么总共就可以记录4GB的操作。从头开始写，写到末尾就又回到开头循环写，如下面这个图所示。<br><img src="https://upload-images.jianshu.io/upload_images/5937589-58794aef40d63f17.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>write pos是当前记录的位置，一边写一边后移，写到第3号文件末尾后就回到0号文件开头。checkpoint是当前要擦除的位置，也是往后推移并且循环的，擦除记录前要把记录更新到数据文件。</p><p>write pos和checkpoint之间的是还空着的部分，可以用来记录新的操作。如果write pos追上checkpoint，表示满了，这时候不能再执行新的更新，得停下来先擦掉一些记录，把checkpoint推进一下。</p><p>有了redo log，InnoDB就可以保证即使数据库发生异常重启，之前提交的记录都不会丢失，这个能力称为<strong>crash-safe</strong>。</p><h2 id="重要的日志模块：binlog"><a href="#重要的日志模块：binlog" class="headerlink" title="重要的日志模块：binlog"></a>重要的日志模块：binlog</h2><p>MySQL整体来看，其实就有两块：一块是Server层，它主要做的是MySQL功能层面的事情；还有一块是引擎层，负责存储相关的具体事宜。上面我们聊到的redo log是InnoDB引擎特有的日志，而Server层也有自己的日志，称为binlog（归档日志）。</p><p>最开始MySQL里并没有InnoDB引擎。MySQL自带的引擎是MyISAM，但是MyISAM没有crash-safe的能力，binlog日志只能用于归档。而InnoDB是另一个公司以插件形式引入MySQL的，既然只依靠binlog是没有crash-safe能力的，所以InnoDB使用另外一套日志系统——也就是redo log来实现crash-safe能力。</p><p>这两种日志有以下三点不同：</p><ol><li>redo log是InnoDB引擎特有的；binlog是MySQL的Server层实现的，所有引擎都可以使用。</li><li>redo log是物理日志，记录的是“在某个数据页上做了什么修改”；binlog是逻辑日志，记录的是这个语句的原始逻辑，比如“给ID=2这一行的c字段加1 ”。</li><li>redo log是循环写的，空间固定会用完；binlog是可以追加写入的。“追加写”是指binlog文件写到一定大小后会切换到下一个，并不会覆盖以前的日志。</li></ol><p>有了对这两个日志的概念性理解，我们再来看执行器和InnoDB引擎在执行这个简单的update语句时的内部流程:</p><ol><li>执行器先找引擎取ID=2这一行。ID是主键，引擎直接用树搜索找到这一行。如果ID=2这一行所在的数据页本来就在内存中，就直接返回给执行器；否则，需要先从磁盘读入内存，然后再返回。</li><li>执行器拿到引擎给的行数据，把这个值加上1，比如原来是N，现在就是N+1，得到新的一行数据，再调用引擎接口写入这行新数据。</li><li>引擎将这行新数据更新到内存中，同时将这个更新操作记录到redo log里面，此时redo log处于prepare状态。然后告知执行器执行完成了，随时可以提交事务。</li><li>执行器生成这个操作的binlog，并把binlog写入磁盘。</li><li>执行器调用引擎的提交事务接口，引擎把刚刚写入的redo log改成提交（commit）状态，更新完成。<br><img src="https://upload-images.jianshu.io/upload_images/5937589-a95b6223d8582bd2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>图中浅色框表示是在InnoDB内部执行的，深色框表示是在执行器中执行的。</li></ol><p>最后三步看上去有点“绕”，将redo log的写入拆成了两个步骤：prepare和commit，这就是”<strong>两阶段提交</strong>“</p><h2 id="tip"><a href="#tip" class="headerlink" title="tip"></a>tip</h2><ul><li><p>redo log用于保证crash-safe能力。innodb_flush_log_at_trx_commit这个参数设置成1的时候，表示每次事务的redo log都直接持久化到磁盘。这个参数建议设置成1，这样可以保证MySQL异常重启之后数据不丢失。</p></li><li><p>sync_binlog这个参数设置成1的时候，表示每次事务的binlog都持久化到磁盘。这个参数建议设置成1，这样可以保证MySQL异常重启之后binlog不丢失。</p></li></ul>]]></content>
    
    <summary type="html">
    
      redo log/ binlog
    
    </summary>
    
      <category term="Mysql" scheme="http://blog.linzhongtai.cn/categories/Mysql/"/>
    
    
      <category term="Mysql" scheme="http://blog.linzhongtai.cn/tags/Mysql/"/>
    
      <category term="MySql实战45讲笔记" scheme="http://blog.linzhongtai.cn/tags/MySql%E5%AE%9E%E6%88%9845%E8%AE%B2%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>1、SQL查询语句的执行流程</title>
    <link href="http://blog.linzhongtai.cn/2020/02/1%E3%80%81SQL%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5%E7%9A%84%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B/"/>
    <id>http://blog.linzhongtai.cn/2020/02/1、SQL查询语句的执行流程/</id>
    <published>2020-02-23T02:15:34.000Z</published>
    <updated>2020-02-23T02:15:34.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p><img src="https://upload-images.jianshu.io/upload_images/5937589-24498967aefcd1b5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="执行流程"></p><h2 id="连接器"><a href="#连接器" class="headerlink" title="连接器"></a>连接器</h2><blockquote><p>连接器负责跟客户端建立连接、获取权限、维持和管理连接</p></blockquote><p>连接命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -h$ip -P$port -u$user -p</span><br></pre></td></tr></table></figure></p><p>连接完成后，如果你没有后续的动作，这个连接就处于空闲状态，你可以在show processlist命令中看到:<br><img src="https://upload-images.jianshu.io/upload_images/5937589-0771fe040db800c9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="show processlist"><br>上图便是show processlist的结果，其中的Command列显示为“Sleep”的这一行，就表示现在系统里面有一个空闲连接。</p><p><strong>客户端如果太长时间没动静，连接器就会自动将它断开。这个时间是由参数wait_timeout控制的，默认值是8小时。</strong><br>如果在连接被断开之后，客户端再次发送请求的话，就会收到一个错误提醒： Lost connection to MySQL server during query。这时候如果你要继续，就需要重连，然后再执行请求了。<br>数据库里面，长连接是指连接成功后，如果客户端持续有请求，则一直使用同一个连接。短连接则是指每次执行完很少的几次查询就断开连接，下次查询再重新建立一个。<br>建立连<br>接的过程通常是比较复杂的，所以我建议你在使用中要尽量减少建立连接的动作，也就是尽量使用长连接。</p><p>但是全部使用长连接后，你可能会发现，有些时候MySQL占用内存涨得特别快，这是因为MySQL在执行过程中临时使用的内存是管理在连接对象里面的。这些资源会在连接断开的时候才释放。所以如果长连接累积下来，可能导致内存占用太大，被系统强行杀掉（OOM），从现象看就是MySQL异常重启了。</p><p>怎么解决这个问题呢？你可以考虑以下两种方案：</p><ul><li>定期断开长连接。使用一段时间，或者程序里面判断执行过一个占用内存的大查询后，断开连接，之后要查询再重连。</li><li>如果你用的是MySQL 5.7或更新版本，可以在每次执行一个比较大的操作后，通过执行 mysql_reset_connection来重新初始化连接资源。这个过程不需要重连和重新做权限验证，但是会将连接恢复到刚刚创建完时的状态。</li></ul><h2 id="查询缓存"><a href="#查询缓存" class="headerlink" title="查询缓存"></a>查询缓存</h2><p>MySQL拿到一个查询请求后，会先到查询缓存看看，之前是不是执行过这条语句。之前执行过的语句及其结果可能会以key-value对的形式，被直接缓存在内存中。key是查询的语句，value是查询的结果。如果你的查询能够直接在这个缓存中找到key，那么这个value就会被直接返回给客户端<br>如果语句不在查询缓存中，就会继续后面的执行阶段。执行完成后，执行结果会被存入查询缓存中。你可以看到，如果查询命中缓存，MySQL不需要执行后面的复杂操作，就可以直接返回结果，这个效率会很高。</p><p><strong>但是大多数情况下建议不要使用查询缓存，因为查询缓存往往弊大于利</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">查询缓存的失效非常频繁，只要有对一个表的更新，这个表上所有的查询缓存都会被清空。</span><br></pre></td></tr></table></figure></p><p>对于更新压力大的数据库来说，查询缓存的命中率会非常低。除非你的业务就是有一张静态表，很长时间才会更新一次。比如，一个系统配置表，那这张表上的查询才适合使用查询缓存。</p><p>MySQL也提供了这种“按需使用”的方式。你可以将参数query_cache_type设置成DEMAND，这样对于默认的SQL语句都不使用查询缓存。而对于你确定要使用查询缓存的语句，可以用SQL_CACHE显式指定，像下面这个语句一样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select SQL_CACHE * from T where ID=10；</span><br></pre></td></tr></table></figure></p><p>不过，MySQL 8.0版本直接将查询缓存的整块功能删掉了，也就是说8.0开始彻底没有这个功能了。</p><h2 id="分析器"><a href="#分析器" class="headerlink" title="分析器"></a>分析器</h2><p>如果没有命中查询缓存，就要开始真正执行语句了。首先，MySQL需要知道你要做什么，因此需要对SQL语句做解析。</p><ol><li>词法分析</li></ol><p>输入的是由多个字符串和空格组成的一条SQL语句，MySQL需要识别出里面的字符串分别是什么，代表什么。<br>MySQL从输入的”select”这个关键字识别出来，这是一个查询语句。它也要把字符串“T”识别成“表名T”，把字符串“ID”识别成“列ID”。</p><ol start="2"><li>语法分析</li></ol><p>根据词法分析的结果，语法分析器会根据语法规则，判断你输入的这个SQL语句是否满足MySQL语法。</p><p>如果你的语句不对，就会收到“You have an error in your SQL syntax”的错误提醒，比如下面这个语句select少打了开头的字母“s”。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; elect * from t where ID=1;</span><br><span class="line"></span><br><span class="line">ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL </span><br><span class="line">server version for the right syntax to use near &apos;elect * from t where ID=1&apos; at line 1</span><br></pre></td></tr></table></figure></p><p>一般语法错误会提示第一个出现错误的位置，所以要关注的是紧接“use near”的内容。</p><h2 id="优化器"><a href="#优化器" class="headerlink" title="优化器"></a>优化器</h2><p>分析器之后，在开始执行之前，还要先经过优化器的处理</p><blockquote><p>优化器是在表里面有多个索引的时候，决定使用哪个索引；或者在一个语句有多表关联（join）的时候，决定各个表的连接顺序</p></blockquote><p><a href="">优化器如何选择索引</a></p><h2 id="执行器"><a href="#执行器" class="headerlink" title="执行器"></a>执行器</h2><p>开始执行的时候，要先判断一下你对这个表T有没有执行查询的权限，如果没有，就会返回没有权限的错误，如下所示(在工程实现上，如果命中查询缓存，会在查询缓存放回结果的时候，做权限验证。查询也会在优化器之前调用precheck验证权限)。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from T where ID=10;</span><br><span class="line"></span><br><span class="line">ERROR 1142 (42000): SELECT command denied to user &apos;b&apos;@&apos;localhost&apos; for table &apos;T&apos;</span><br></pre></td></tr></table></figure></p><p>如果有权限，就打开表继续执行。打开表的时候，执行器就会根据表的引擎定义，去使用这个引擎提供的接口。</p><p>比如我们这个例子中的表T中，ID字段没有索引，那么执行器的执行流程是这样的：</p><ol><li>调用InnoDB引擎接口取这个表的第一行，判断ID值是不是10，如果不是则跳过，如果是则将这行存在结果集中；</li><li>调用引擎接口取“下一行”，重复相同的判断逻辑，直到取到这个表的最后一行。</li><li>执行器将上述遍历过程中所有满足条件的行组成的记录集作为结果集返回给客户端。</li></ol><p>至此，这个语句就执行完成了。</p><p>对于有索引的表，执行的逻辑也差不多。第一次调用的是“取满足条件的第一行”这个接口，之后循环取“满足条件的下一行”这个接口，这些接口都是引擎中已经定义好的。</p><p>你会在数据库的慢查询日志中看到一个rows_examined的字段，表示这个语句执行过程中扫描了多少行。这个值就是在执行器每次调用引擎获取数据行的时候累加的。</p><p>在有些场景下，执行器调用一次，在引擎内部则扫描了多行，因此<strong>引擎扫描行数跟rows_examined并不是完全相同的</strong></p>]]></content>
    
    <summary type="html">
    
      客户端-&gt;连接器-&gt;(查询缓存)-&gt;分析器-&gt;优化器-&gt;执行器
    
    </summary>
    
      <category term="Mysql" scheme="http://blog.linzhongtai.cn/categories/Mysql/"/>
    
    
      <category term="Mysql" scheme="http://blog.linzhongtai.cn/tags/Mysql/"/>
    
      <category term="MySql实战45讲笔记" scheme="http://blog.linzhongtai.cn/tags/MySql%E5%AE%9E%E6%88%9845%E8%AE%B2%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>一致性Hash</title>
    <link href="http://blog.linzhongtai.cn/2019/10/%E4%B8%80%E8%87%B4%E6%80%A7Hash/"/>
    <id>http://blog.linzhongtai.cn/2019/10/一致性Hash/</id>
    <published>2019-10-07T08:50:18.000Z</published>
    <updated>2019-10-07T08:50:18.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p>转载出处：<a href="https://www.jianshu.com/p/e968c081f563" target="_blank" rel="noopener">深入浅出一致性Hash原理</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在解决分布式系统中负载均衡的问题时候可以使用Hash算法让固定的一部分请求落到同一台服务器上，这样每台服务器固定处理一部分请求（并维护这些请求的信息），起到负载均衡的作用。<br>但是普通的余数hash（hash(比如用户id)%服务器机器数）算法伸缩性很差，当新增或者下线服务器机器时候，用户id与服务器的映射关系会大量失效，一致性hash则利用hash环对其进行了改进。</p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><blockquote><p>为了能直观的理解一致性hash原理，这里结合一个简单的例子来讲解，假设有4台服务器，地址为ip1,ip2,ip3,ip4</p></blockquote><ul><li>一致性hash是首先计算四个ip地址对应的hash值<br>hash(ip1),hash(ip2),hash(ip3),hash(ip3)，计算出来的hash值是0~最大正整数直接的一个值，这四个值在一致性hash环上呈现如下图：<br><img src="https://upload-images.jianshu.io/upload_images/5937589-f36a02d459b891e7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></li><li><p>hash环上顺时针从整数0开始，一直到最大正整数，我们根据四个ip计算的hash值肯定会落到这个hash环上的某一个点，至此我们把服务器的四个ip映射到了一致性hash环</p></li><li><p>当用户在客户端进行请求时候，首先根据hash(用户id)</p></li></ul><p>计算路由规则（hash值），然后看hash值落到了hash环的那个地方，根据hash值在hash环上的位置顺时针找距离最近的ip作为路由ip.<br><img src="https://upload-images.jianshu.io/upload_images/5937589-7a45f2ac961c3574.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>如上图可知user1,user2的请求会落到服务器ip2进行处理，User3的请求会落到服务器ip3进行处理，user4的请求会落到服务器ip4进行处理，user5,user6的请求会落到服务器ip1进行处理</p><blockquote><p>下面考虑当ip2的服务器挂了的时候会出现什么情况？</p></blockquote><p>当ip2的服务器挂了的时候，一致性hash环大致如下图：<br><img src="https://upload-images.jianshu.io/upload_images/5937589-a1e6ac80c33db25e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>根据顺时针规则可知user1,user2的请求会被服务器ip3进行处理，而其它用户的请求对应的处理服务器不变，也就是只有之前被ip2处理的一部分用户的映射关系被破坏了，并且其负责处理的请求被顺时针下一个节点委托处理</p><blockquote><p>下面考虑当新增机器的时候会出现什么情况？</p></blockquote><p>当新增一个ip5的服务器后，一致性hash环大致如下图：<br><img src="https://upload-images.jianshu.io/upload_images/5937589-d861ff3b63be2eeb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>根据顺时针规则可知之前user5的请求应该被ip5服务器处理，现在被新增的ip5服务器处理，其他用户的请求处理服务器不变，也就是新增的服务器顺时针最近的服务器的一部分请求会被新增的服务器所替代</p><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ol><li>单调性(Monotonicity)</li></ol><p>单调性是指如果已经有一些请求通过哈希分派到了相应的服务器进行处理，又有新的服务器加入到系统中时候，应保证原有的请求可以被映射到原有的或者新的服务器中去，而不会被映射到原来的其它服务器上去。 这个通过上面新增服务器ip5可以证明，新增ip5后，原来被ip1处理的user6现在还是被ip1处理，原来被ip1处理的user5现在被新增的ip5处理。</p><ol start="2"><li>分散性(Spread)</li></ol><p>分布式环境中，客户端请求时候可能不知道所有服务器的存在，可能只知道其中一部分服务器，在客户端看来他看到的部分服务器会形成一个完整的hash环。如果多个客户端都把部分服务器作为一个完整hash环，那么可能会导致，同一个用户的请求被路由到不同的服务器进行处理。这种情况显然是应该避免的，因为它不能保证同一个用户的请求落到同一个服务器。所谓分散性是指上述情况发生的严重程度。好的哈希算法应尽量避免尽量降低分散性。 一致性hash具有很低的分散性</p><ol start="3"><li>平衡性(Balance)</li></ol><p>平衡性也就是说负载均衡，是指客户端hash后的请求应该能够分散到不同的服务器上去。一致性hash可以做到每个服务器都进行处理请求，但是不能保证每个服务器处理的请求的数量大致相同，如下图<br><img src="https://upload-images.jianshu.io/upload_images/5937589-e2c0b21702ba2b6b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><strong>服务器ip1,ip2,ip3经过hash后落到了一致性hash环上，从图中hash值分布可知ip1会负责处理大概80%的请求，而ip2和ip3则只会负责处理大概20%的请求，虽然三个机器都在处理请求，但是明显每个机器的负载不均衡，这样称为一致性hash的倾斜，虚拟节点的出现就是为了解决这个问题</strong></p><h2 id="虚拟节点"><a href="#虚拟节点" class="headerlink" title="虚拟节点"></a>虚拟节点</h2><p>当服务器节点比较少的时候会出现上节所说的一致性hash倾斜的问题，一个解决方法是多加机器，但是加机器是有成本的，那么就加虚拟节点，比如上面三个机器，每个机器引入1个虚拟节点后的一致性hash环的图如下：<br><img src="https://upload-images.jianshu.io/upload_images/5937589-f195c5c8f0b8d060.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>其中ip1-1是ip1的虚拟节点，ip2-1是ip2的虚拟节点，ip3-1是ip3的虚拟节点。<br>可知当物理机器数目为M，虚拟节点为N的时候，实际hash环上节点个数为M*N。比如当客户端计算的hash值处于ip2和ip3或者处于ip2-1和ip3-1之间时候使用ip3服务器进行处理。</p><h2 id="均匀一致性hash"><a href="#均匀一致性hash" class="headerlink" title="均匀一致性hash"></a>均匀一致性hash</h2><p>上节我们使用虚拟节点后的图看起来比较均衡，但是如果生成虚拟节点的算法不够好很可能会得到下面的环：<img src="https://upload-images.jianshu.io/upload_images/5937589-d426ea1c4d751f65.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>可知每个服务节点引入1个虚拟节点后，情况相比没有引入前均衡性有所改善，但是并不均衡。<br>均衡的一致性hash应该是如下图：<br><img src="https://upload-images.jianshu.io/upload_images/5937589-481b1a95d6fa2bba.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>均匀一致性hash的目标是如果服务器有N台，客户端的hash值有M个，那么每个服务器应该处理大概M/N个用户的，也就是每台服务器负载尽量均衡。</p>]]></content>
    
    <summary type="html">
    
      在解决分布式系统中负载均衡的问题时候可以使用Hash算法让固定的一部分请求落到同一台服务器上，这样每台服务器固定处理一部分请求（并维护这些请求的信息），起到负载均衡的作用。但是普通的余数hash（hash(比如用户id)%服务器机器数）算法伸缩性很差，当新增或者下线服务器机器时候，用户id与服务器的映射关系会大量失效，一致性hash则利用hash环对其进行了改进。
    
    </summary>
    
      <category term="杂烩" scheme="http://blog.linzhongtai.cn/categories/%E6%9D%82%E7%83%A9/"/>
    
    
      <category term="小知识" scheme="http://blog.linzhongtai.cn/tags/%E5%B0%8F%E7%9F%A5%E8%AF%86/"/>
    
      <category term="杂烩" scheme="http://blog.linzhongtai.cn/tags/%E6%9D%82%E7%83%A9/"/>
    
  </entry>
  
  <entry>
    <title>Spring @Component派生性</title>
    <link href="http://blog.linzhongtai.cn/2019/07/Spring%20@Component%E6%B4%BE%E7%94%9F%E6%80%A7/"/>
    <id>http://blog.linzhongtai.cn/2019/07/Spring @Component派生性/</id>
    <published>2019-07-06T11:16:30.000Z</published>
    <updated>2019-07-06T11:16:30.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><blockquote><p>Spring核心部分提供了几种内建模式的注解，如@Component、@Service、@Repository、@Controller、@RestController以及@Configrution，但是Spring Framework并不限于这些内建模式注解，也可以自定义模式注解，Spring模式注解可理解为@Component”派生”注解</p></blockquote><ul><li><strong>Spring Framework 2.x</strong>只支持单层的@Component派生</li><li><strong>Spring Framework 3.0.0.RELEASE 后</strong>开始支持@Component，但是仅仅支持两层@Component派生（AnnotationAttributesReadingVisitor仅支持了两个for循环）</li><li><strong>Spring Framework 4.0.0.RELEASE 后</strong>开始支持多层次的@Component派生（AnnotationAttributesReadingVisitor采用递归） </li></ul><p><strong>ClassPathBeanDefinitionScanner</strong>允许自定义类型过滤规则，因此，Dubbo的@Service在没有标注@Component的情况下，通过scanner.addIncludeFilter(newAnnotationTypeFilter(Service.class))的方式达到了识别@Service所标注类的目的，不过这种方式没有用到@Component的派生性</p>]]></content>
    
    <summary type="html">
    
      Spring模式注解可理解为@Component&quot;派生&quot;注解
    
    </summary>
    
      <category term="JAVA" scheme="http://blog.linzhongtai.cn/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="http://blog.linzhongtai.cn/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot如何解决项目启动时初始化资源</title>
    <link href="http://blog.linzhongtai.cn/2019/06/SpringBoot%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%E9%A1%B9%E7%9B%AE%E5%90%AF%E5%8A%A8%E6%97%B6%E5%88%9D%E5%A7%8B%E5%8C%96%E8%B5%84%E6%BA%90/"/>
    <id>http://blog.linzhongtai.cn/2019/06/SpringBoot如何解决项目启动时初始化资源/</id>
    <published>2019-06-24T06:39:04.000Z</published>
    <updated>2019-06-24T06:39:04.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><blockquote><p>本文转发自《纯洁的微笑》，原文链接：<a href="http://www.ityouknow.com/springboot/2018/05/03/spring-boot-commandLineRunner.html" target="_blank" rel="noopener">Spring Boot 如何解决项目启动时初始化资源</a></p></blockquote><p>在我们实际工作中，总会遇到这样需求，在项目启动的时候需要做一些初始化的操作，比如初始化线程池，提前加载好加密证书等。今天就给大家介绍一个 Spring Boot 神器，专门帮助大家解决项目启动初始化资源操作。</p><p>这个神器就是 CommandLineRunner，CommandLineRunner 接口的 Component 会在所有 Spring Beans 都初始化之后，SpringApplication.run() 之前执行，非常适合在应用程序启动之初进行一些数据初始化的工作。</p><p>接下来我们就运用案例测试它如何使用，在测试之前在启动类加两行打印提示，方便我们识别 CommandLineRunner 的执行时机。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">public class CommandLineRunnerApplication &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">System.out.println(&quot;The service to start.&quot;);</span><br><span class="line">SpringApplication.run(CommandLineRunnerApplication.class, args);</span><br><span class="line">System.out.println(&quot;The service has started.&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来我们直接创建一个类继承 CommandLineRunner ，并实现它的 run() 方法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">public class Runner implements CommandLineRunner &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void run(String... args) throws Exception &#123;</span><br><span class="line">        System.out.println(&quot;The Runner start to initialize ...&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们在 run() 方法中打印了一些参数来看出它的执行时机。完成之后启动项目进行测试：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">The service to start.</span><br><span class="line"></span><br><span class="line">  .   ____          _            __ _ _</span><br><span class="line"> /\\ / ___&apos;_ __ _ _(_)_ __  __ _ \ \ \ \</span><br><span class="line">( ( )\___ | &apos;_ | &apos;_| | &apos;_ \/ _` | \ \ \ \</span><br><span class="line"> \\/  ___)| |_)| | | | | || (_| |  ) ) ) )</span><br><span class="line">  &apos;  |____| .__|_| |_|_| |_\__, | / / / /</span><br><span class="line"> =========|_|==============|___/=/_/_/_/</span><br><span class="line"> :: Spring Boot ::        (v2.0.0.RELEASE)</span><br><span class="line">...</span><br><span class="line">2018-04-21 22:21:34.706  INFO 27016 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path &apos;&apos;</span><br><span class="line">2018-04-21 22:21:34.710  INFO 27016 --- [           main] com.neo.CommandLineRunnerApplication     : Started CommandLineRunnerApplication in 3.796 seconds (JVM running for 5.128)</span><br><span class="line">The Runner start to initialize ...</span><br><span class="line">The service has started.</span><br></pre></td></tr></table></figure></p><p>根据控制台的打印信息我们可以看出 CommandLineRunner 中的方法会在 Spring Boot 容器加载之后执行，执行完成后项目启动完成。</p><p>如果我们在启动容器的时候需要初始化很多资源，并且初始化资源相互之间有序，那如何保证不同的 CommandLineRunner 的执行顺序呢？Spring Boot 也给出了解决方案。那就是使用 @Order 注解。</p><p>我们创建两个 CommandLineRunner 的实现类来进行测试：</p><p>第一个实现类：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">@Order(1)</span><br><span class="line">public class OrderRunner1 implements CommandLineRunner &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void run(String... args) throws Exception &#123;</span><br><span class="line">        System.out.println(&quot;The OrderRunner1 start to initialize ...&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>第二个实现类：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">@Order(2)</span><br><span class="line">public class OrderRunner2 implements CommandLineRunner &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void run(String... args) throws Exception &#123;</span><br><span class="line">        System.out.println(&quot;The OrderRunner2 start to initialize ...&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>添加完成之后重新启动，观察执行顺序：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">The service to start.</span><br><span class="line"></span><br><span class="line">  .   ____          _            __ _ _</span><br><span class="line"> /\\ / ___&apos;_ __ _ _(_)_ __  __ _ \ \ \ \</span><br><span class="line">( ( )\___ | &apos;_ | &apos;_| | &apos;_ \/ _` | \ \ \ \</span><br><span class="line"> \\/  ___)| |_)| | | | | || (_| |  ) ) ) )</span><br><span class="line">  &apos;  |____| .__|_| |_|_| |_\__, | / / / /</span><br><span class="line"> =========|_|==============|___/=/_/_/_/</span><br><span class="line"> :: Spring Boot ::        (v2.0.0.RELEASE)</span><br><span class="line">...</span><br><span class="line">2018-04-21 22:21:34.706  INFO 27016 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path &apos;&apos;</span><br><span class="line">2018-04-21 22:21:34.710  INFO 27016 --- [           main] com.neo.CommandLineRunnerApplication     : Started CommandLineRunnerApplication in 3.796 seconds (JVM running for 5.128)</span><br><span class="line">The OrderRunner1 start to initialize ...</span><br><span class="line">The OrderRunner2 start to initialize ...</span><br><span class="line">The Runner start to initialize ...</span><br><span class="line">The service has started.</span><br></pre></td></tr></table></figure></p><p>通过控制台的输出我们发现，添加 @Order 注解的实现类最先执行，并且@Order()里面的值越小启动越早。</p>]]></content>
    
    <summary type="html">
    
      CommandLineRunner
    
    </summary>
    
      <category term="SpringBoot" scheme="http://blog.linzhongtai.cn/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="http://blog.linzhongtai.cn/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>Linux常用文件搜索命令</title>
    <link href="http://blog.linzhongtai.cn/2019/06/Linux%E5%B8%B8%E7%94%A8%E6%96%87%E4%BB%B6%E6%90%9C%E7%B4%A2%E5%91%BD%E4%BB%A4/"/>
    <id>http://blog.linzhongtai.cn/2019/06/Linux常用文件搜索命令/</id>
    <published>2019-06-13T02:59:46.000Z</published>
    <updated>2019-06-13T02:59:46.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="最强大的搜索命令：find"><a href="#最强大的搜索命令：find" class="headerlink" title="最强大的搜索命令：find"></a>最强大的搜索命令：find</h2><blockquote><p>首先进行一点说明，find命令是我们在Linux系统中用来进行文件搜索用的最多的命令，功能特别强大。但是我们要说的是尽量少用find命令去执行搜索任务，就算要搜索我们也应该尽量的缩小范围，也不要在服务器使用高峰期进行文件搜索，因为搜索也是很占系统资源的。这就需要我们在进行Linux文件整理的时候，尽量规范化，什么文件放在什么目录下都要有比较好的约定。</p></blockquote><ol><li>命令名称：find</li><li>命令所在路径：/bin/find</li><li>执行权限：所有用户</li><li>功能描述：进行各种花式文件搜索</li><li>语法：find【搜索范围】【匹配条件】</li></ol><p><strong>Linux搜索和windows是有明显区别的，Linux严格区分文件大小写。</strong></p><h3 id="文件或目录名称"><a href="#文件或目录名称" class="headerlink" title="文件或目录名称"></a>文件或目录名称</h3><p>find 【搜索目录】【-name或者-iname】【搜索字符】：-name和-iname的区别一个区分大小写，一个不区分大小写</p><ol><li>find /etc -name init   (精准搜索，名字必须为 init 才能搜索的到)</li><li>find /etc -iname init   (精准搜索，名字必须为 init或者有字母大写也能搜索的到)</li><li>find /etc -name *init  (模糊搜索，以 init 结尾的文件或目录名) </li><li>find /etc -name init??? (模糊搜索，？ 表示单个字符，即搜索到 init___)</li></ol><h3 id="文件大小"><a href="#文件大小" class="headerlink" title="文件大小"></a>文件大小</h3><p>比如：在根目录下查找大于 100M 的文件</p><blockquote><p>find / -size +204800</p></blockquote><p><strong>+n 表示大于，-n 表示小于，n 表示等于</strong><br>1 数据块 == 512 字节 ==0.5KB，也就是1KB等于2数据块<br>100MB == 102400KB==204800数据块</p><h3 id="所有者和所属组"><a href="#所有者和所属组" class="headerlink" title="所有者和所属组"></a>所有者和所属组</h3><ol><li><p>在home目录下查询所属组为 root 的文件</p><blockquote><p>find /home -group root</p></blockquote></li><li><p>在home目录下查询所有者为 root 的文件</p><blockquote><p>find /home -user root</p></blockquote></li></ol><h3 id="时间属性"><a href="#时间属性" class="headerlink" title="时间属性"></a>时间属性</h3><p>find 【路径】【选项】【时间】<br>选项有下面三种：</p><ul><li>-amin  访问时间</li><li>-cmin   文件属性被更改</li><li>-mmin  文件内容被修改</li></ul><p>时间：<strong>+n,-n,n分别表示超过n分钟，n分钟以内和n分钟</strong><br>范例：在 /etc 目录下查找5 分钟内被修改过属性的文件和目录</p><blockquote><p>find /etc -cmin -5</p></blockquote><h3 id="文件类型或i节点"><a href="#文件类型或i节点" class="headerlink" title="文件类型或i节点"></a>文件类型或i节点</h3><p><strong>-type 根据文件类型查找：f表示文件，d表示目录，l表示软链接</strong></p><p>范例：查找 /home 目录下文件类型是目录的   find /home -type l</p><p><strong>-inum 根据i节点查找</strong></p><p>范例：查找 /tmp 目录下i节点为400342的文件或目录  find /tmp -inum 400342</p><h3 id="组合条件"><a href="#组合条件" class="headerlink" title="组合条件"></a>组合条件</h3><ol><li>-a  表示两个条件同时满足（and）</li><li>-o  表示两个条件满足任意一个即可（or）</li></ol><p>范例：查找/etc目录下大于80MB同时小于100MB的文件</p><blockquote><p>find /etc -size +163840 -a -size -204800</p></blockquote><h2 id="在文件资料库中查找文件命令：locate"><a href="#在文件资料库中查找文件命令：locate" class="headerlink" title="在文件资料库中查找文件命令：locate"></a>在文件资料库中查找文件命令：locate</h2><ol><li>命令名称：locate</li><li>命令所在路径：/usr/bin/locate</li><li>执行权限：所有用户</li><li>功能描述：在文件资料库中查找文件</li><li>语法：locate【文件名】<br>-i  不区分大小写</li></ol><blockquote><p><strong>注意</strong>：这里和 find 命令是有区别的，find是全盘检索，而locate 是在文件资料库中进行搜索。所以locate命令的执行要比find命令执行速度快很多。但是这里有个问题，文件资料库是需要不断更新的。我们新创建的文件如果不更新 文件资料库，使用 locate 是查找不到的。</p></blockquote><blockquote><p>updatedb  手动更新资料库，但是对于/tmp目录下的新建文件，是更新不到文件资料库的，因为/tmp目录不属于文件资料库的收录范围。</p></blockquote><h2 id="搜索命令所在的目录及别名信息：which"><a href="#搜索命令所在的目录及别名信息：which" class="headerlink" title="搜索命令所在的目录及别名信息：which"></a>搜索命令所在的目录及别名信息：which</h2><ol><li>命令名称：which</li><li>命令所在路径：/usr/bin/which</li><li>执行权限：所有用户</li><li>功能描述：搜索命令所在的目录及别名信息</li><li>语法：which【命令】</li></ol><p>范例：查询 ls 命令所在目录以及别名信息</p><blockquote><p>which ls</p></blockquote><h2 id="搜索命令所在的目录及帮助文档路径：whereis"><a href="#搜索命令所在的目录及帮助文档路径：whereis" class="headerlink" title="搜索命令所在的目录及帮助文档路径：whereis"></a>搜索命令所在的目录及帮助文档路径：whereis</h2><ol><li>命令名称：whereis</li><li>命令所在路径：/usr/bin/whereis</li><li>执行权限：所有用户</li><li>功能描述：搜索命令所在的目录及帮助文档路径</li><li>语法：whereis【命令】</li></ol><p>范例：查询 ls 命令所在目录以及帮助文档路径</p><blockquote><p>whereis ls</p></blockquote><h2 id="在文件中搜寻字符串匹配的行并输出：grep"><a href="#在文件中搜寻字符串匹配的行并输出：grep" class="headerlink" title="在文件中搜寻字符串匹配的行并输出：grep"></a>在文件中搜寻字符串匹配的行并输出：grep</h2><ol><li>命令名称：grep</li><li>命令所在路径：/bin/grep</li><li>执行权限：所有用户</li><li>功能描述：在文件中搜寻字符串匹配的行并输出</li><li>语法：grep -iv 【指定字符串】【文件】<br>　　　　　　 -i 不区分大小写<br>　　　　　　 -v 排除指定字符串</li></ol><p>范例：查找 /root/install.log 文件中包含 mysql 字符串的行，并输出</p><blockquote><p>grep  mysql  /root/install.log</p></blockquote>]]></content>
    
    <summary type="html">
    
      find/locate/which/whereis/grep
    
    </summary>
    
      <category term="linux" scheme="http://blog.linzhongtai.cn/categories/linux/"/>
    
    
      <category term="linux" scheme="http://blog.linzhongtai.cn/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>网络IO模型</title>
    <link href="http://blog.linzhongtai.cn/2019/06/%E7%BD%91%E7%BB%9CIO%E6%A8%A1%E5%9E%8B/"/>
    <id>http://blog.linzhongtai.cn/2019/06/网络IO模型/</id>
    <published>2019-06-04T04:20:58.000Z</published>
    <updated>2019-06-04T04:20:58.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="网络IO的模型大致包括下面几种"><a href="#网络IO的模型大致包括下面几种" class="headerlink" title="网络IO的模型大致包括下面几种"></a>网络IO的模型大致包括下面几种</h2><ul><li>同步模型（synchronous IO）<ul><li>阻塞IO（bloking IO）</li><li>非阻塞IO（non-blocking IO）</li><li>多路复用IO（multiplexing IO）</li><li>信号驱动式IO（signal-driven IO）</li></ul></li><li>异步IO（asynchronous IO）<ul><li>异步IO</li></ul></li></ul><p>网络IO的本质是socket的读取，socket在linux系统被抽象为流，IO可以理解为对流的操作。对于一次IO访问，数据会先被拷贝到操作系统内核的缓冲区中，然后才会从操作系统内核的缓冲区拷贝到应用程序的地址空间，所以一般会经历两个阶段：</p><ol><li>等待所有数据都准备好或者一直在等待数据，有数据的时候将数据拷贝到系统内核；</li><li>将内核缓存中数据拷贝到用户进程中；</li></ol><p>对于socket流而言：</p><ol><li>等待网络上的数据分组到达，然后被复制到内核的某个缓冲区；</li><li>把数据从内核缓冲区复制到应用进程缓冲区中；</li></ol><h2 id="同步阻塞IO"><a href="#同步阻塞IO" class="headerlink" title="同步阻塞IO"></a>同步阻塞IO</h2><blockquote><p>在JDK 1.4之前，主要就是同步阻塞IO模型，在Java里叫做<strong>BIO</strong>。</p></blockquote><p>在Java代码里调用IO相关接口，发起IO操作之后，Java程序就会同步等待，这个同步指的是Java程序调用IO API接口的层面而言。<br>而IO API在底层的IO操作是基于阻塞IO来的，向操作系统内核发起IO请求，系统内核会等待数据就位之后，才会执行IO操作，执行完毕了才会返回。</p><h2 id="同步非阻塞NIO"><a href="#同步非阻塞NIO" class="headerlink" title="同步非阻塞NIO"></a>同步非阻塞NIO</h2><blockquote><p>在JDK 1.4之后提供了NIO，概念是同步非阻塞。</p></blockquote><p>如果你调用NIO接口去执行IO操作，其实还是同步等待的，但是在底层的IO操作上 ，会对系统内核发起非阻塞IO请求，以非阻塞的形式来执行IO。<br>也就是说，如果底层数据没到位，那么内核返回异常信息，不会阻塞住，但是NIO接口内部会采用非阻塞方式过一会儿再次调用内核发起IO请求，直到成功为止。<br>但是之所以说是同步非阻塞，这里的“同步”指的就是因为在你的Java代码调用NIO接口层面是同步的，你还是要同步等待底层IO操作真正完成了才可以返回，只不过在执行底层IO的时候采用了非阻塞的方式来执行罢了。</p><h2 id="IO多路复用"><a href="#IO多路复用" class="headerlink" title="IO多路复用"></a>IO多路复用</h2><p>之前的同步非阻塞方式需要用户进程不停的轮询，但是IO多路复用不需要不停的轮询，而是派别人去帮忙循环查询多个任务的完成状态，UNIX/Linux 下的 <strong>select、poll、epoll</strong> 就是干这个的；select调用是内核级别的，select轮询相对非阻塞的轮询的区别在于—前者可以等待多个socket，能实现同时对多个IO端口进行监听，当其中任何一个socket的数据准好了，就能返回进行可读，然后进程再进行recvform系统调用，将数据由内核拷贝到用户进程，当然这个过程是阻塞的。select或poll调用之后，会阻塞进程，与blocking IO阻塞不同在于，此时的select不是等到socket数据全部到达再处理, 而是有了一部分数据（网络上的数据是分组到达的）就会调用用户进程来处理。监视的事情交给了内核，内核负责数据到达的处理。</p><p>以上总结就是：</p><ol><li>对多个socket进行监听，只要任何一个socket数据准备好就返回可读；</li><li>不等一个socket数据全部到达再处理，而是一部分socket的数据到达了就通知用户进程；</li></ol><blockquote><p>其实 select、poll、epoll 的原理就是不断的遍历所负责的所有的socket完成状态，当某个socket有数据到达了，就返回可读并通知用户进程来处理；</p></blockquote><h2 id="AIO以及异步IO"><a href="#AIO以及异步IO" class="headerlink" title="AIO以及异步IO"></a>AIO以及异步IO</h2><blockquote><p>JDK 1.7之后，又支持了AIO，也叫做NIO 2.0，他就支持异步IO模型。</p></blockquote><p>我们先说一下异步IO模型是什么意思。<br>简单来说，就是你的Java程序可以基于AIO API发起一个请求，比如说接收网络数据，AIO API底层会基于异步IO模型来调用操作系统内核。<br>此时不需要去管这个IO是否成功了，AIO接口会直接返回，你的Java程序也会直接返回。<br>因为BIO、NIO都是同步的，你发起IO请求，都必须同步等待IO操作完成。但是这里你发起一个IO请求，直接AIO接口就返回了，你就可以干别的事儿了，纯异步的方式。<br>不过你需要提供一个回调函数给AIO接口，一旦底层系统内核完成了具体的IO请求，比如网络读写之类的，就会回调你提供的回调函数。比如说你要是通过网络读取数据，那么此时AIO接口就会把操作系统异步读取到的数据交给你的回调函数。<br>整个过程如下图：<br><img src="https://upload-images.jianshu.io/upload_images/5937589-f7c8114bf6407354.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="微信图片_20190604123852.jpg"></p>]]></content>
    
    <summary type="html">
    
      同步、异步、阻塞、非阻塞
    
    </summary>
    
      <category term="IO" scheme="http://blog.linzhongtai.cn/categories/IO/"/>
    
    
      <category term="IO" scheme="http://blog.linzhongtai.cn/tags/IO/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 属性加载顺序</title>
    <link href="http://blog.linzhongtai.cn/2019/05/Spring-Boot-%E5%B1%9E%E6%80%A7%E5%8A%A0%E8%BD%BD%E9%A1%BA%E5%BA%8F/"/>
    <id>http://blog.linzhongtai.cn/2019/05/Spring-Boot-属性加载顺序/</id>
    <published>2019-05-28T03:48:24.000Z</published>
    <updated>2019-05-28T03:48:24.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><ol><li>在命令行中传入的参数</li><li>SPRING_APPLICATION_JSON 中的属性，SPRING_APPLICATION_JSON 是以JSON格式配置在系统环境变量中的内容</li><li>java:comp/env 中的JNI属性</li><li>Java的系统属性，可以通过System.getProperties()获得的内容</li><li>操作系统的环境变量</li><li>通过random.* 配置的随机属性</li><li><strong>位于当前应用 jar 包之外</strong>，针对不同{profile}环境的配置文件内容；例如application-{profile}.properties或是YAML定义的配置文件</li><li><strong>位于当前应用 jar 包之内</strong>，针对不同{profile}环境的配置文件内容；例如application-{profile}.properties或是YAML定义的配置文件</li><li><strong>位于当前应用 jar 包之外</strong>的application.properties和YAML配置内容</li><li><strong>位于当前应用 jar 包之内</strong>的application.properties和YAML配置内容</li><li>在@Configuration注解修改的类中，通过@PropertiesSource注解定义的属性</li><li>应用默认属性，使用SpringApplication.setDefaultProperties定义的内容</li></ol><blockquote><p>优先级由高到低，数字越小，优先级越高</p></blockquote><p>第7，9都是用应用jar包之外来读取配置文件，因此可以从此处进行切入，指定外部配置文件的加载位置来取代jar包之内的配置内容。</p>]]></content>
    
    <summary type="html">
    
      属性加载顺序
    
    </summary>
    
      <category term="SpringBoot" scheme="http://blog.linzhongtai.cn/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="http://blog.linzhongtai.cn/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot常用配置</title>
    <link href="http://blog.linzhongtai.cn/2019/05/SpringBoot%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/"/>
    <id>http://blog.linzhongtai.cn/2019/05/SpringBoot常用配置/</id>
    <published>2019-05-28T01:42:17.000Z</published>
    <updated>2019-05-28T01:42:17.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="Bean的Scope"><a href="#Bean的Scope" class="headerlink" title="Bean的Scope"></a>Bean的Scope</h2><ul><li>Singleton：一个Spring容器中只有一个Bean的实例，此为Spring的默认配置，全容器共享一个实例</li><li>Prototype：每次调用新建一个Bean的实例</li><li>Request：Web项目中，给每一个http request新建一个Bean实例</li><li>Session：Web项目中，给每一个http session新建一个Bean实例</li><li>GlobalSession：只在portal应用中有用，给每一个global http session新建一个Bean实例</li></ul><h2 id="Spring-EL-和资源调节"><a href="#Spring-EL-和资源调节" class="headerlink" title="Spring EL 和资源调节"></a>Spring EL 和资源调节</h2><p>Spring主要在注解@Value的参数中使用表达式：</p><ol><li>注入普通字符串</li><li>注入操作系统属性</li><li>注入表达式运算结果</li><li>注入其他Bean的属性</li><li>注入文件内容</li><li>注入网址内容</li><li>注入属性文件</li></ol><h2 id="Bean的初始化和销毁"><a href="#Bean的初始化和销毁" class="headerlink" title="Bean的初始化和销毁"></a>Bean的初始化和销毁</h2><blockquote><p>在Bean使用之前或者之后要做些必要的操作，Spring对Bean的生命周期的操作提供了支持</p></blockquote><ol><li>Java配置方式：使用@Bean的initMethod和destoryMethod（相当于xml配置的init-method和destory-method）</li><li>注解方式：利用JSR-250的@PostConstruct和@PreDestory</li></ol><h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><p>使用ThreadPoolTaskExecutor可实现一个基于线程池的TaskExecutor</p><blockquote><p> 在配置类中通过<strong>@EnableAsync</strong>开启对异步任务的支持，并通过在执行方法中使用<strong>@Async</strong>注解赖声明为异步任务</p></blockquote><h2 id="计划任务"><a href="#计划任务" class="headerlink" title="计划任务"></a>计划任务</h2><blockquote><p>首先在配置类注解<strong>@EnableScheduling</strong>来开启对计划任务的支持，然后在执行计划任务的方法上注解<strong>@Scheduled</strong>，声明为计划任务</p></blockquote><p>@Scheduled支持多种类型的计划任务，包含cron、fixDelay、fixRate等等</p>]]></content>
    
    <summary type="html">
    
      SpringBoot常用配置
    
    </summary>
    
      <category term="SpringBoot" scheme="http://blog.linzhongtai.cn/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="http://blog.linzhongtai.cn/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>CyclicBarrier、CountDownLatch、Semaphore的用法</title>
    <link href="http://blog.linzhongtai.cn/2019/04/CyclicBarrier%E3%80%81CountDownLatch%E3%80%81Semaphore%E7%9A%84%E7%94%A8%E6%B3%95/"/>
    <id>http://blog.linzhongtai.cn/2019/04/CyclicBarrier、CountDownLatch、Semaphore的用法/</id>
    <published>2019-04-29T09:49:05.000Z</published>
    <updated>2019-04-29T09:49:05.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="CyclicBarrier回环栅栏"><a href="#CyclicBarrier回环栅栏" class="headerlink" title="CyclicBarrier回环栅栏"></a>CyclicBarrier回环栅栏</h2><blockquote><p>等待至 barrier 状态再全部同时执行<br><strong>可重用</strong></p></blockquote><p>通过它可以实现让一组线程等待至某个状态之后再全部同时执行。叫做回环是因为当所有等待线程都被释放以后，CyclicBarrier 可以被重用。</p><p>CyclicBarrier 中最重要的方法就是 await 方法，它有 2 个重载版本：</p><ol><li>public int await()：用来挂起当前线程，直至所有线程都到达 barrier 状态再同时执行后续任务；</li><li>public int await(long timeout, TimeUnit unit)：让这些线程等待至一定的时间，如果还有线程没有到达 barrier 状态就直接让到达 barrier 的线程执行后续任务</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">  int N = 4;</span><br><span class="line">  CyclicBarrier barrier = new CyclicBarrier(N);</span><br><span class="line">  for(int i=0;i&lt;N;i++)</span><br><span class="line">    new Writer(barrier).start();</span><br><span class="line">  &#125;</span><br><span class="line">  static class Writer extends Thread&#123;</span><br><span class="line">    private CyclicBarrier cyclicBarrier;</span><br><span class="line">    public Writer(CyclicBarrier cyclicBarrier) &#123;</span><br><span class="line">      this.cyclicBarrier = cyclicBarrier;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">      try &#123;</span><br><span class="line">        Thread.sleep(5000); //以睡眠来模拟线程需要预定写入数据操作</span><br><span class="line">        System.out.println(&quot;线程&quot;+Thread.currentThread().getName()+&quot;写入数据完毕，等待其他线程写入完毕&quot;);</span><br><span class="line">        cyclicBarrier.await();</span><br><span class="line">      &#125; catch (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">      &#125;catch(BrokenBarrierException e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println(&quot;所有线程写入完毕，继续处理其他任务，比如数据操作&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CyclicBarrier(int parties)：参数表示屏障拦截的线程数，每个线程调用await方法告CyclicBarrier已到达屏障，然后阻塞当前线程。</p><h2 id="CounDownLatch线程计数器"><a href="#CounDownLatch线程计数器" class="headerlink" title="CounDownLatch线程计数器"></a>CounDownLatch线程计数器</h2><blockquote><p>任务A，需要等其他四个任务完毕后，才执行。<br><strong>不可重用</strong></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">final CountDownLatch latch = new CountDownLatch(2);</span><br><span class="line">  new Thread()&#123;public void run() &#123;</span><br><span class="line">      System.out.println(&quot;子线程&quot;+Thread.currentThread().getName()+&quot;正在执行&quot;);</span><br><span class="line">      Thread.sleep(3000);</span><br><span class="line">      System.out.println(&quot;子线程&quot;+Thread.currentThread().getName()+&quot;执行完毕&quot;);</span><br><span class="line">      latch.countDown();</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;.start();</span><br><span class="line">  new Thread()&#123; public void run() &#123;</span><br><span class="line">      System.out.println(&quot;子线程&quot;+Thread.currentThread().getName()+&quot;正在执行&quot;);</span><br><span class="line">       Thread.sleep(3000);</span><br><span class="line">      System.out.println(&quot;子线程&quot;+Thread.currentThread().getName()+&quot;执行完毕&quot;);</span><br><span class="line">      latch.countDown();</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;.start();</span><br><span class="line">System.out.println(&quot;等待 2 个子线程执行完毕...&quot;);</span><br><span class="line">latch.await();</span><br><span class="line">System.out.println(&quot;2 个子线程已经执行完毕&quot;);</span><br><span class="line">System.out.println(&quot;继续执行主线程&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>等待N个线程，调用countDown，N减1，CountDownLatch的await方法会阻塞当前线程，直到N变成0，countDown可以放在线程中，也可以放到执行步骤中。</p><h2 id="SemaPhore信号量"><a href="#SemaPhore信号量" class="headerlink" title="SemaPhore信号量"></a>SemaPhore信号量</h2><blockquote><p>控制同时访问的线程个数.<br>通过acquire() 获取一个许可，如果没有就等待，而 release() 释放一个许可。</p></blockquote><p>Semaphore 类中比较重要的几个方法：</p><ol><li>public void acquire(): 用来获取一个许可，若无许可能够获得，则会一直等待，直到获得许可。</li><li>public void acquire(int permits):获取 permits 个许可</li><li>public void release() { } :释放许可。注意，在释放许可之前，必须先获获得许可。</li><li>public void release(int permits) { }:释放 permits 个许可</li></ol><p>上面 4 个方法都会被阻塞，如果想立即得到执行结果，可以使用下面几个方法</p><ol><li>public boolean tryAcquire():尝试获取一个许可，若获取成功，则立即返回 true，若获取失败，则立即返回 false</li><li>public boolean tryAcquire(long timeout, TimeUnit unit):尝试获取一个许可，若在指定的时间内获取成功，则立即返回 true，否则则立即返回 false</li><li>public boolean tryAcquire(int permits):尝试获取 permits 个许可，若获取成功，则立即返回 true，若获取失败，则立即返回 false</li><li>public boolean tryAcquire(int permits, long timeout, TimeUnit unit): 尝试获取 permits个许可，若在指定的时间内获取成功，则立即返回 true，否则则立即返回 false</li><li>还可以通过 availablePermits()方法得到可用的许可数目。</li></ol><p>例子：若一个工厂有5 台机器，但是有8个工人，一台机器同时只能被一个工人使用，只有使用完了，其他工人才能继续使用。那么我们就可以通过 Semaphore 来实现：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">int N = 8; //工人数</span><br><span class="line">Semaphore semaphore = new Semaphore(5); //机器数目</span><br><span class="line">for(int i=0;i&lt;N;i++)&#123;</span><br><span class="line">  new Worker(i,semaphore).start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static class Worker extends Thread&#123;</span><br><span class="line"></span><br><span class="line">private int num;</span><br><span class="line">private Semaphore semaphore;</span><br><span class="line">public Worker(int num,Semaphore semaphore)&#123;</span><br><span class="line">  this.num = num;</span><br><span class="line">  this.semaphore = semaphore;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line">  try &#123;</span><br><span class="line">    semaphore.acquire();</span><br><span class="line">    System.out.println(&quot;工人&quot;+this.num+&quot;占用一个机器在生产...&quot;);</span><br><span class="line">    Thread.sleep(2000);</span><br><span class="line">    System.out.println(&quot;工人&quot;+this.num+&quot;释放出机器&quot;);</span><br><span class="line">    semaphore.release();</span><br><span class="line">  &#125; catch (InterruptedException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      回环栅栏、线程计数器、信号量
    
    </summary>
    
      <category term="JAVA" scheme="http://blog.linzhongtai.cn/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="http://blog.linzhongtai.cn/tags/JAVA/"/>
    
      <category term="并发编程" scheme="http://blog.linzhongtai.cn/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>AQS与CAS</title>
    <link href="http://blog.linzhongtai.cn/2019/04/AQS%E4%B8%8ECAS/"/>
    <id>http://blog.linzhongtai.cn/2019/04/AQS与CAS/</id>
    <published>2019-04-29T09:29:16.000Z</published>
    <updated>2019-04-29T09:29:16.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="AQS（AbstractQueueSynchronizer）抽象队列同步器"><a href="#AQS（AbstractQueueSynchronizer）抽象队列同步器" class="headerlink" title="AQS（AbstractQueueSynchronizer）抽象队列同步器"></a>AQS（AbstractQueueSynchronizer）抽象队列同步器</h2><blockquote><p>维护了一个 int state（代表共享资源，volatile修饰）和一个 FIFO 线程等待队列（多线程争用资源被<br>阻塞时会进入此队列）</p></blockquote><h3 id="资源共享方式"><a href="#资源共享方式" class="headerlink" title="资源共享方式"></a>资源共享方式</h3><ul><li>独占—&gt;ReentrantLock</li><li>共享—&gt;Semaphore/CountDownLatch</li><li>独占+共享—&gt;ReentrantReadWriteLock</li></ul><h2 id="CAS（Compare-And-Swap-Set）比较并交换-乐观锁机制-锁自旋"><a href="#CAS（Compare-And-Swap-Set）比较并交换-乐观锁机制-锁自旋" class="headerlink" title="CAS（Compare And Swap/Set）比较并交换-乐观锁机制-锁自旋"></a>CAS（Compare And Swap/Set）比较并交换-乐观锁机制-锁自旋</h2><blockquote><p>当且仅当内存值V等于预期值A，才会将内存值设置为新值N</p></blockquote><ul><li>锁自旋—&gt;AtomicInteger.getAndIncrement</li><li>ABA问题—&gt;版本号解决</li></ul>]]></content>
    
    <summary type="html">
    
      什么是AQS？什么是CAS？
    
    </summary>
    
      <category term="JAVA" scheme="http://blog.linzhongtai.cn/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="http://blog.linzhongtai.cn/tags/JAVA/"/>
    
      <category term="小知识" scheme="http://blog.linzhongtai.cn/tags/%E5%B0%8F%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>Redis缓存淘汰策略</title>
    <link href="http://blog.linzhongtai.cn/2019/04/Redis%E7%BC%93%E5%AD%98%E6%B7%98%E6%B1%B0%E7%AD%96%E7%95%A5/"/>
    <id>http://blog.linzhongtai.cn/2019/04/Redis缓存淘汰策略/</id>
    <published>2019-04-29T09:13:17.000Z</published>
    <updated>2019-04-29T09:13:17.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="常用的淘汰算法"><a href="#常用的淘汰算法" class="headerlink" title="常用的淘汰算法"></a>常用的淘汰算法</h2><ul><li>FIFO：First In First Out，先进先出。判断被存储的时间，离目前最远的数据优先被淘汰。</li><li>LRU：Least Recently Used，最近最少使用。判断最近被使用的时间，目前最远的数据优先被淘汰。</li><li>LFU：Least Frequently Used，最不经常使用。在一段时间内，数据被使用次数最少的，优先被淘汰。</li></ul><h2 id="Redis提供的淘汰策略："><a href="#Redis提供的淘汰策略：" class="headerlink" title="Redis提供的淘汰策略："></a>Redis提供的淘汰策略：</h2><ul><li>noeviction：达到内存限额后返回错误，客户尝试可以导致更多内存使用的命令（大部分写命令，但DEL和一些例外）</li><li>allkeys-lru：为了给新增加的数据腾出空间，驱逐键先试图移除一部分最近使用较少的（LRC）。</li><li>volatile-lru：为了给新增加的数据腾出空间，驱逐键先试图移除一部分最近使用较少的（LRC），但只限于过期设置键。</li><li>allkeys-random: 为了给新增加的数据腾出空间，驱逐任意键</li><li>volatile-random: 为了给新增加的数据腾出空间，驱逐任意键，但只限于有过期设置的驱逐键。</li><li>volatile-ttl: 为了给新增加的数据腾出空间，驱逐键只有秘钥过期设置，并且首先尝试缩短存活时间的驱逐键</li></ul>]]></content>
    
    <summary type="html">
    
      LRU
    
    </summary>
    
      <category term="redis" scheme="http://blog.linzhongtai.cn/categories/redis/"/>
    
    
      <category term="redis" scheme="http://blog.linzhongtai.cn/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>Redis中keys与scan特点</title>
    <link href="http://blog.linzhongtai.cn/2019/04/Redis%E4%B8%ADkeys%E4%B8%8Escan%E7%89%B9%E7%82%B9/"/>
    <id>http://blog.linzhongtai.cn/2019/04/Redis中keys与scan特点/</id>
    <published>2019-04-29T09:06:41.000Z</published>
    <updated>2019-04-29T09:06:41.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="keys缺点"><a href="#keys缺点" class="headerlink" title="keys缺点"></a>keys缺点</h2><ol><li>没有offset、limit参数，不能限制查询个数</li><li>keys是遍历算法，复杂度O(n)，数据量大的时候会导致redis卡顿</li></ol><h2 id="scan"><a href="#scan" class="headerlink" title="scan"></a>scan</h2><ol><li>复杂度O(n)，但是scan是通过游标分步进行，不阻塞</li><li>提供limit，可控制返回结果数</li><li>同keys一样，提供模式匹配</li><li>服务器不需要为游标保存状态，唯一状态是scan返回客户端的游标整数</li><li><strong>返回结果可能重复，需要客户端去重</strong></li><li>如果遍历过程中有数据修改，改动后的数据不保证同步</li><li>单次返回结果是空的，不表示遍历结束，而要看返回的游标值是否为0</li></ol>]]></content>
    
    <summary type="html">
    
      keys VS scan
    
    </summary>
    
      <category term="redis" scheme="http://blog.linzhongtai.cn/categories/redis/"/>
    
    
      <category term="redis" scheme="http://blog.linzhongtai.cn/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>重温系列之多线程并发：阻塞队列</title>
    <link href="http://blog.linzhongtai.cn/2019/04/%E9%87%8D%E6%B8%A9%E7%B3%BB%E5%88%97%E4%B9%8B%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%B9%B6%E5%8F%91%EF%BC%9A%E9%98%BB%E5%A1%9E%E9%98%9F%E5%88%97/"/>
    <id>http://blog.linzhongtai.cn/2019/04/重温系列之多线程并发：阻塞队列/</id>
    <published>2019-04-01T11:48:51.000Z</published>
    <updated>2019-04-01T11:48:51.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p>在阻塞队列中，线程阻塞有这样的两种情况：</p><ol><li>当队列中没有数据的情况下，消费者端的所有线程都会被自动阻塞（挂起），直到有数据放<br>入队列。</li><li>当队列中填满数据的情况下，生产者端的所有线程都会被自动阻塞（挂起），直到队列中有<br>空的位置，线程被自动唤醒。</li></ol><h2 id="阻塞队列的主要方法"><a href="#阻塞队列的主要方法" class="headerlink" title="阻塞队列的主要方法"></a>阻塞队列的主要方法</h2><table><thead><tr><th>方法类型</th><th>抛出异常</th><th>特殊值</th><th>阻塞</th><th>超时</th></tr></thead><tbody><tr><td>插入</td><td>add(e)</td><td>offer(e)</td><td>put(e)</td><td>offer(e,time,unit)</td></tr><tr><td>移除</td><td>remove()</td><td>poll()</td><td>take()</td><td>poll(time,unit)</td></tr><tr><td>检查</td><td>element()</td><td>peek()</td><td>不可用</td><td>不可用</td></tr></tbody></table><ul><li>抛出异常：抛出一个异常</li><li>特殊值：返回一个特殊值（null 或 false,视情况而定）</li><li>阻塞：在成功操作之前，一直阻塞线程</li><li>超时：放弃前只在最大的时间内阻塞</li></ul><h3 id="插入操作"><a href="#插入操作" class="headerlink" title="插入操作"></a>插入操作</h3><ol><li>public abstract boolean add(E paramE)：将指定元素插入此队列中（如果立即可行且不会违反容量限制），成功时返回 true，如果当前没有可用的空间，则抛出IllegalStateException。如果该元素是 NULL，则会抛出 NullPointerException 异常。</li><li>public abstract boolean offer(E paramE)：将指定元素插入此队列中（如果立即可行且不会违反容量限制），成功时返回 true，如果当前没有可用的空间，则返回false。</li><li><p>public abstract void put(E paramE) throws InterruptedException： 将指定元素插入此队列中，将等待可用的空间（如果有必要）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public void put(E paramE) throws InterruptedException &#123;</span><br><span class="line">  checkNotNull(paramE);</span><br><span class="line">  ReentrantLock localReentrantLock = this.lock;</span><br><span class="line">  localReentrantLock.lockInterruptibly();</span><br><span class="line">  try &#123;</span><br><span class="line">    while (this.count == this.items.length)</span><br><span class="line">    this.notFull.await();//如果队列满了，则线程阻塞等待</span><br><span class="line">    enqueue(paramE);</span><br><span class="line">    localReentrantLock.unlock();</span><br><span class="line">  &#125; finally &#123;</span><br><span class="line">    localReentrantLock.unlock();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>offer(E o, long timeout, TimeUnit unit)：可以设定等待的时间，如果在指定的时间内，还不能往队列中加入 BlockingQueue，则返回失败。</p></li></ol><h3 id="获取数据操作-："><a href="#获取数据操作-：" class="headerlink" title="获取数据操作 ："></a>获取数据操作 ：</h3><ol><li>poll(time):取走 BlockingQueue 里排在首位的对象,若不能立即取出,则可以等 time 参数规定的时间,取不到时返回 null;</li><li>poll(long timeout, TimeUnit unit)：从 BlockingQueue 取出一个队首的对象，如果在指定时间内，队列一旦有数据可取，则立即返回队列中的数据。否则直到时间超时还没有数据可取，返回失败。</li><li>take():取走 BlockingQueue 里排在首位的对象,若 BlockingQueue 为空,阻断进入等待状态直到 BlockingQueue 有新的数据被加入。</li><li>drainTo():一次性从 BlockingQueue 获取所有可用的数据对象（还可以指定获取数据的个数），通过该方法，可以提升获取数据效率；不需要多次分批加锁或释放锁。</li></ol><h2 id="Java-中的阻塞队列"><a href="#Java-中的阻塞队列" class="headerlink" title="Java 中的阻塞队列"></a>Java 中的阻塞队列</h2><p><img src="https://blog2019.oss-cn-shenzhen.aliyuncs.com/%E9%98%BB%E5%A1%9E%E9%98%9F%E5%88%97.jpg" alt=""></p><h3 id="ArrayBlockingQueue-：由数组结构组成的有界阻塞队列"><a href="#ArrayBlockingQueue-：由数组结构组成的有界阻塞队列" class="headerlink" title="ArrayBlockingQueue ：由数组结构组成的有界阻塞队列"></a>ArrayBlockingQueue ：由数组结构组成的有界阻塞队列</h3><blockquote><p>公平、非公平</p></blockquote><p>用数组实现的有界阻塞队列。此队列按照先进先出（FIFO）的原则对元素进行排序。默认情况下不保证访问者公平的访问队列，所谓公平访问队列是指阻塞的所有生产者线程或消费者线程，当队列可用时，可以按照阻塞的先后顺序访问队列，即先阻塞的生产者线程，可以先往队列里插入元素，先阻塞的消费者线程，可以先从队列里获取元素。通常情况下为了保证公平性会降低吞吐量。我们可以使用以下代码创建一个公平的阻塞队列：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ArrayBlockingQueue fairQueue = new ArrayBlockingQueue(1000,true);</span><br></pre></td></tr></table></figure></p><h3 id="LinkedBlockingQueue-：由链表结构组成的有界阻塞队列。"><a href="#LinkedBlockingQueue-：由链表结构组成的有界阻塞队列。" class="headerlink" title="LinkedBlockingQueue ：由链表结构组成的有界阻塞队列。"></a>LinkedBlockingQueue ：由链表结构组成的有界阻塞队列。</h3><blockquote><p>两个独立锁提高并发</p></blockquote><p>基于链表的阻塞队列，同ArrayListBlockingQueue类似，此队列按照先进先出（FIFO）的原则对元素进行排序。而 LinkedBlockingQueue 之所以能够高效的处理并发数据，还因为其对于生产者端和消费者端分别采用了独立的锁来控制数据同步，这也意味着在高并发的情况下生产者和消费者可以并行地操作队列中的数据，以此来提高整个队列的并发性能。<br>LinkedBlockingQueue 会默认一个类似无限大小的容量（Integer.MAX_VALUE）。</p><h3 id="PriorityBlockingQueue-：支持优先级排序的无界阻塞队列。"><a href="#PriorityBlockingQueue-：支持优先级排序的无界阻塞队列。" class="headerlink" title="PriorityBlockingQueue ：支持优先级排序的无界阻塞队列。"></a>PriorityBlockingQueue ：支持优先级排序的无界阻塞队列。</h3><blockquote><p>compareTo 排序实现优先</p></blockquote><p>是一个支持优先级的无界队列。默认情况下元素采取自然顺序升序排列。可以自定义实现compareTo()方法来指定元素进行排序规则，或者初始化 PriorityBlockingQueue 时，指定构造参数 Comparator 来对元素进行排序。需要注意的是不能保证同优先级元素的顺序。</p><h3 id="DelayQueue：使用优先级队列实现的无界阻塞队列。"><a href="#DelayQueue：使用优先级队列实现的无界阻塞队列。" class="headerlink" title="DelayQueue：使用优先级队列实现的无界阻塞队列。"></a>DelayQueue：使用优先级队列实现的无界阻塞队列。</h3><blockquote><p>缓存失效、定时任务</p></blockquote><p>是一个支持延时获取元素的无界阻塞队列。队列使用PriorityQueue来实现。队列中的元素必须实现 Delayed 接口，在创建元素时可以指定多久才能从队列中获取当前元素。只有在延迟期满时才能从队列中提取元素。我们可以将 DelayQueue 运用在以下应用场景：</p><ol><li>缓存系统的设计：可以用 DelayQueue 保存缓存元素的有效期，使用一个线程循环查询DelayQueue，一旦能从 DelayQueue 中获取元素时，表示缓存有效期到了。</li><li>定时任务调度：使用 DelayQueue 保存当天将会执行的任务和执行时间，一旦从DelayQueue 中获取到任务就开始执行，从比如 TimerQueue 就是使用 DelayQueue实现的。</li></ol><h3 id="SynchronousQueue：不存储元素的阻塞队列。"><a href="#SynchronousQueue：不存储元素的阻塞队列。" class="headerlink" title="SynchronousQueue：不存储元素的阻塞队列。"></a>SynchronousQueue：不存储元素的阻塞队列。</h3><blockquote><p>不存储数据、可用于传递数据</p></blockquote><p><strong>是一个不存储元素的阻塞队列。每一个 put 操作必须等待一个 take 操作，否则不能继续添加元素</strong>。SynchronousQueue 可以看成是一个传球手，负责把生产者线程处理的数据直接传递给消费者线程。队列本身并不存储任何元素，非常适合于传递性场景,比如在一个线程中使用的数据，传递给另外一个线程使用，SynchronousQueue的吞吐量高于LinkedBlockingQueue 和ArrayBlockingQueue。</p><h3 id="LinkedTransferQueue：由链表结构组成的无界阻塞队列。"><a href="#LinkedTransferQueue：由链表结构组成的无界阻塞队列。" class="headerlink" title="LinkedTransferQueue：由链表结构组成的无界阻塞队列。"></a>LinkedTransferQueue：由链表结构组成的无界阻塞队列。</h3><p>是 一 个 由 链 表 结 构 组 成 的 无 界 阻 塞 TransferQueue 队 列 。 相 对 于 其 他 阻 塞 队 列 ，LinkedTransferQueue 多了 tryTransfer 和 transfer 方法。</p><ol><li>transfer 方法：如果当前有消费者正在等待接收元素（消费者使用 take()方法或带时间限制的poll()方法时），transfer 方法可以把生产者传入的元素立刻 transfer（传输）给消费者。如果没有消费者在等待接收元素，transfer 方法会将元素存放在队列的 tail 节点，并等到该元素被消费者消费了才返回。</li><li>tryTransfer 方法。则是用来试探下生产者传入的元素是否能直接传给消费者。如果没有消费者等待接收元素，则返回 false。和 transfer 方法的区别是 tryTransfer 方法无论消费者是否接收，方法立即返回。而 transfer 方法是必须等到消费者消费了才返回。</li></ol><p>对于带有时间限制的 tryTransfer(E e, long timeout, TimeUnit unit)方法，则是试图把生产者传入的元素直接传给消费者，但是如果没有消费者消费该元素则等待指定的时间再返回，如果超时还没消费元素，则返回 false，如果在超时时间内消费了元素，则返回 true。</p><h3 id="LinkedBlockingDeque：由链表结构组成的双向阻塞队列"><a href="#LinkedBlockingDeque：由链表结构组成的双向阻塞队列" class="headerlink" title="LinkedBlockingDeque：由链表结构组成的双向阻塞队列"></a>LinkedBlockingDeque：由链表结构组成的双向阻塞队列</h3><p><strong>是一个由链表结构组成的双向阻塞队列。所谓双向队列指的你可以从队列的两端插入和移出元素。</strong><br>双端队列因为多了一个操作队列的入口，在多线程同时入队时，也就减少了一半的竞争。相比其他的阻塞队列，LinkedBlockingDeque 多了 addFirst，addLast，offerFirst，offerLast，peekFirst，peekLast 等方法，以 First 单词结尾的方法，表示插入，获取（peek）或移除双端队列的第一个元素。以 Last 单词结尾的方法，表示插入，获取或移除双端队列的最后一个元素。另外插入方法 add 等同于 addLast，移除方法 remove 等效于 removeFirst。但是 take 方法却等同于 takeFirst，不知道是不是 Jdk 的 bug，使用时还是用带有 First 和 Last 后缀的方法更清楚。<br>在初始化 LinkedBlockingDeque 时可以设置容量防止其过渡膨胀。另外双向阻塞队列可以运用在“工作窃取”模式中。</p>]]></content>
    
    <summary type="html">
    
      阻塞、超时、抛出异常...
    
    </summary>
    
      <category term="并发编程" scheme="http://blog.linzhongtai.cn/categories/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="并发编程" scheme="http://blog.linzhongtai.cn/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
      <category term="重温" scheme="http://blog.linzhongtai.cn/tags/%E9%87%8D%E6%B8%A9/"/>
    
  </entry>
  
  <entry>
    <title>重温系列之多线程并发：线程池原理</title>
    <link href="http://blog.linzhongtai.cn/2019/04/%E9%87%8D%E6%B8%A9%E7%B3%BB%E5%88%97%E4%B9%8B%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%B9%B6%E5%8F%91%EF%BC%9A%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%8E%9F%E7%90%86/"/>
    <id>http://blog.linzhongtai.cn/2019/04/重温系列之多线程并发：线程池原理/</id>
    <published>2019-04-01T11:45:59.000Z</published>
    <updated>2019-04-01T11:45:59.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><blockquote><p>线程池做的工作主要是控制运行的线程的数量，处理过程中将任务放入队列，然后在线程创建后启动这些任务，如果线程数量超过了最大数量则<strong>超出数量的线程排队等候</strong>，等其它线程执行完毕，再从队列中取出任务来执行。他的主要特点为：<strong>线程复用、控制最大并发数、管理线程</strong>。</p></blockquote><h2 id="线程复用"><a href="#线程复用" class="headerlink" title="线程复用"></a>线程复用</h2><p>每一个 Thread 的类都有一个 start 方法。 当调用 start 启动线程时 Java 虚拟机会调用该类的 run方法。 那么该类的 run() 方法中就是调用了 Runnable 对象的 run() 方法。 <strong>我们可以继承重写Thread 类，在其 start 方法中添加不断循环调用传递过来的 Runnable 对象</strong>。 这就是线程池的实现原理。<strong>循环方法中不断获取 Runnable 是用 Queue 实现的</strong>，在获取下一个 Runnable 之前可以是阻塞的。</p><h2 id="线程池的组成"><a href="#线程池的组成" class="headerlink" title="线程池的组成"></a>线程池的组成</h2><ol><li>线程池管理器：用于创建并管理线程池</li><li>工作线程：线程池中的线程</li><li>任务接口：每个任务必须实现的接口，用于工作线程调度其运行</li><li>任务队列：用于存放待处理的任务，提供一种缓冲机制</li></ol><p>Java 中的线程池是通过 Executor 框架实现的，该框架中用到了 Executor，Executors，ExecutorService，ThreadPoolExecutor ，Callable 和 Future、FutureTask 这几个类。<br><img src="https://blog2019.oss-cn-shenzhen.aliyuncs.com/1554104383%281%29.jpg" alt=""><br>ThreadPoolExecutor 的构造方法如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public ThreadPoolExecutor(int corePoolSize,int maximumPoolSize, long keepAliveTime,</span><br><span class="line">                    TimeUnit unit, BlockingQueue&lt;Runnable&gt; workQueue) &#123;</span><br><span class="line">          this(corePoolSize, maximumPoolSize, keepAliveTime, unit, </span><br><span class="line">                workQueue,Executors.defaultThreadFactory(), defaultHandler);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ol><li>corePoolSize：指定了线程池中的线程数量。</li><li>maximumPoolSize：指定了线程池中的最大线程数量。</li><li>keepAliveTime：当前线程池数量超过 corePoolSize 时，多余的空闲线程的存活时间，即多次时间内会被销毁。</li><li>unit：keepAliveTime 的单位。</li><li>workQueue：任务队列，被提交但尚未被执行的任务。</li><li>threadFactory：线程工厂，用于创建线程，一般用默认的即可。</li><li>handler：拒绝策略，当任务太多来不及处理，如何拒绝任务。</li></ol><h2 id="拒绝策略"><a href="#拒绝策略" class="headerlink" title="拒绝策略"></a>拒绝策略</h2><p>线程池中的线程已经用完了，无法继续为新任务服务，同时，等待队列也已经排满了，再也塞不下新任务了。这时候我们就需要拒绝策略机制合理的处理这个问题。JDK 内置的拒绝策略如下：</p><ol><li>AbortPolicy ： 直接抛出异常，阻止系统正常运行。</li><li>CallerRunsPolicy ： 只要线程池未关闭，该策略直接在调用者线程中，运行当前被丢弃的任务。显然这样做不会真的丢弃任务，但是，任务提交线程的性能极有可能会急剧下降。</li><li>DiscardOldestPolicy ： 丢弃最老的一个请求，也就是即将被执行的一个任务，并尝试再次提交当前任务。</li><li>DiscardPolicy ： 该策略默默地丢弃无法处理的任务，不予任何处理。如果允许任务丢失，这是最好的一种方案。</li></ol><p>以上内置拒绝策略均实现了 RejectedExecutionHandler 接口，若以上策略仍无法满足实际需要，完全可以自己扩展 RejectedExecutionHandler 接口。</p><h2 id="Java线程池工作过程"><a href="#Java线程池工作过程" class="headerlink" title="Java线程池工作过程"></a>Java线程池工作过程</h2><ol><li>线程池刚创建时，里面没有一个线程。任务队列是作为参数传进来的。不过，就算队列里面有任务，线程池也不会马上执行它们。</li><li>当调用 execute() 方法添加一个任务时，线程池会做如下判断：<br>a)  如果正在运行的线程数量小于 corePoolSize，那么马上创建线程运行这个任务；<br>b) 如果正在运行的线程数量大于或等于 corePoolSize，那么将这个任务放入队列；<br>c)  如果这时候队列满了，而且正在运行的线程数量小于 maximumPoolSize，那么还是要创建非核心线程立刻运行这个任务；<br>d) 如果队列满了，而且正在运行的线程数量大于或等于 maximumPoolSize，那么线程池会抛出异常 RejectExecutionException。</li><li>当一个线程完成任务时，它会从队列中取下一个任务来执行。</li><li>当一个线程无事可做，超过一定的时间（keepAliveTime）时，线程池会判断，如果当前运行的线程数大于 corePoolSize，那么这个线程就被停掉。所以线程池的所有任务完成后，它最终会收缩到 corePoolSize 的大小。<br><img src="https://blog2019.oss-cn-shenzhen.aliyuncs.com/java%E7%BA%BF%E7%A8%8B%E6%B1%A0.jpg" alt=""></li></ol>]]></content>
    
    <summary type="html">
    
      线程复用、控制最大并发数、管理线程
    
    </summary>
    
      <category term="并发编程" scheme="http://blog.linzhongtai.cn/categories/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="并发编程" scheme="http://blog.linzhongtai.cn/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
      <category term="重温" scheme="http://blog.linzhongtai.cn/tags/%E9%87%8D%E6%B8%A9/"/>
    
  </entry>
  
  <entry>
    <title>重温系列之多线程并发：锁的优化</title>
    <link href="http://blog.linzhongtai.cn/2019/04/%E9%87%8D%E6%B8%A9%E7%B3%BB%E5%88%97%E4%B9%8B%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%B9%B6%E5%8F%91%EF%BC%9A%E9%94%81%E7%9A%84%E4%BC%98%E5%8C%96/"/>
    <id>http://blog.linzhongtai.cn/2019/04/重温系列之多线程并发：锁的优化/</id>
    <published>2019-04-01T11:44:49.000Z</published>
    <updated>2019-04-01T11:44:49.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="减少锁持有时间"><a href="#减少锁持有时间" class="headerlink" title="减少锁持有时间"></a>减少锁持有时间</h2><blockquote><p>只用在需要线程安全的方法上加锁</p></blockquote><h2 id="减小锁粒度"><a href="#减小锁粒度" class="headerlink" title="减小锁粒度"></a>减小锁粒度</h2><p>将大对象（这个对象可能会被很多线程访问），拆成小对象，大大增加并行度，降低锁竞争。降低了锁的竞争，偏向锁，轻量级锁成功率才会提高。最最典型的减小锁粒度的案例就是ConcurrentHashMap。</p><h2 id="锁分离"><a href="#锁分离" class="headerlink" title="锁分离"></a>锁分离</h2><p>最常见的锁分离就是读写锁 ReadWriteLock，根据功能进行分离成读锁和写锁，这样读读不互斥，读写互斥，写写互斥，即保证了线程安全，又提高了性能。读写分离思想可以延伸，只要操作互不影响，锁就可以分离。比如下面的LinkedBlockingQueue 从头部取出，从尾部放数据<br><img src="https://blog2019.oss-cn-shenzhen.aliyuncs.com/%E9%94%81%E5%88%86%E7%A6%BB.png" alt=""></p><h2 id="锁粗化"><a href="#锁粗化" class="headerlink" title="锁粗化"></a>锁粗化</h2><p>通常情况下，为了保证多线程间的有效并发，会要求每个线程持有锁的时间尽量短，即在使用完公共资源后，应该立即释放锁。但是，凡事都有一个度，<strong>如果对同一个锁不停的进行请求、同步和释放，其本身也会消耗系统宝贵的资源，反而不利于性能的优化 。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public void demoMethod()&#123;  </span><br><span class="line">synchronized(lock)&#123;   </span><br><span class="line">//do sth.  </span><br><span class="line">&#125;  </span><br><span class="line">//做其他不需要的同步的工作，但能很快执行完毕  </span><br><span class="line">synchronized(lock)&#123;   </span><br><span class="line">//do sth.  </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种情况，根据锁粗化的思想，应该合并<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public void demoMethod()&#123;  </span><br><span class="line">//整合成一次锁请求 </span><br><span class="line">synchronized(lock)&#123;   </span><br><span class="line">//do sth.   </span><br><span class="line">//做其他不需要的同步的工作，但能很快执行完毕  </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>当然这是有前提的，前提就是中间的那些不需要同步的工作是很快执行完成的。</p><h2 id="锁消除"><a href="#锁消除" class="headerlink" title="锁消除"></a>锁消除</h2><blockquote><p>在即时编译器时，如果发现不可能被共享的对象，则可以消除这些对象的锁操作。</p></blockquote><p>也许你会觉得奇怪，既然有些对象不可能被多线程访问，那为什么要加锁呢？写代码时直接不加锁不就好了。<br>但是有时，这些锁并不是程序员所写的，有的是JDK实现中就有锁的，比如Vector和StringBuffer这样的类，它们中的很多方法都是有锁的。当我们在一些不会有线程安全的情况下使用这些类的方法时，达到某些条件时，编译器会将锁消除来提高性能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"><span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2000000</span>; i++) &#123;</span><br><span class="line">createStringBuffer(<span class="string">"JVM"</span>, <span class="string">"Diagnosis"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> bufferCost = System.currentTimeMillis() - start;</span><br><span class="line">System.out.println(<span class="string">"craeteStringBuffer: "</span> + bufferCost + <span class="string">" ms"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">createStringBuffer</span><span class="params">(String s1, String s2)</span> </span>&#123;</span><br><span class="line">StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">sb.append(s1);</span><br><span class="line">sb.append(s2);</span><br><span class="line"><span class="keyword">return</span> sb.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>StringBuffer.append是一个同步操作，但是StringBuffer却是一个局部变量，并且方法也并没有把StringBuffer返回，所以不可能会有多线程去访问它，那么此时StringBuffer中的同步操作就是没有意义的。</p><p>开启锁消除是在JVM参数上设置的，当然需要在server模式下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-server -XX:+DoEscapeAnalysis -XX:+EliminateLocks</span><br></pre></td></tr></table></figure></p><p>并且要开启<strong><a href="http://www.importnew.com/23150.html" target="_blank" rel="noopener">逃逸分析</a></strong>。<br> 逃逸分析的作用呢，就是看看变量是否有可能逃出作用域的范围：<br>比如上述的StringBuffer，上述代码中craeteStringBuffer的返回是一个String，所以这个局部变量StringBuffer在其他地方都不会被使用。如果将craeteStringBuffer改成<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public static StringBuffer craeteStringBuffer(String s1, String s2) &#123;</span><br><span class="line">StringBuffer sb = new StringBuffer();</span><br><span class="line">sb.append(s1);</span><br><span class="line">sb.append(s2);</span><br><span class="line">return sb;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>那么这个 StringBuffer被返回后，是有可能被任何其他地方所使用的（譬如被主函数将返回结果put进map啊等等）。那么JVM的逃逸分析可以分析出，这个局部变量 StringBuffer逃出了它的作用域。<br>所以基于逃逸分析，JVM可以判断，如果这个局部变量StringBuffer并没有逃出它的作用域，那么可以确定这个StringBuffer并不会被多线程所访问，那么就可以把这些多余的锁给去掉来提高性能</p>]]></content>
    
    <summary type="html">
    
      优化路漫漫
    
    </summary>
    
      <category term="并发编程" scheme="http://blog.linzhongtai.cn/categories/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="并发编程" scheme="http://blog.linzhongtai.cn/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
      <category term="重温" scheme="http://blog.linzhongtai.cn/tags/%E9%87%8D%E6%B8%A9/"/>
    
      <category term="锁" scheme="http://blog.linzhongtai.cn/tags/%E9%94%81/"/>
    
  </entry>
  
  <entry>
    <title>重温系列之多线程并发：锁分类</title>
    <link href="http://blog.linzhongtai.cn/2019/04/%E9%87%8D%E6%B8%A9%E7%B3%BB%E5%88%97%E4%B9%8B%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%B9%B6%E5%8F%91%EF%BC%9A%E9%94%81%E5%88%86%E7%B1%BB/"/>
    <id>http://blog.linzhongtai.cn/2019/04/重温系列之多线程并发：锁分类/</id>
    <published>2019-04-01T11:42:35.000Z</published>
    <updated>2019-04-01T11:42:35.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="可重入锁"><a href="#可重入锁" class="headerlink" title="可重入锁"></a>可重入锁</h2><blockquote><p>可重入锁，也叫做递归锁，指的是同一线程 外层函数获得锁之后 ，内层递归函数仍然有获取该锁的代码，但不受影响。在 JAVA 环境下 ReentrantLock 和 synchronized 都是 可重入锁。</p></blockquote><h2 id="ReadWriteLock-读写锁"><a href="#ReadWriteLock-读写锁" class="headerlink" title="ReadWriteLock  读写锁"></a>ReadWriteLock  读写锁</h2><p><strong>为了提高性能，Java 提供了读写锁，在读的地方使用读锁，在写的地方使用写锁，灵活控制</strong>，如果没有写锁的情况下，读是无阻塞的,在一定程度上提高了程序的执行效率。读写锁分为读锁和写锁，多个读锁不互斥，读锁与写锁互斥，这是由 jvm 自己控制的，你只要上好相应的锁即可。</p><h3 id="读锁"><a href="#读锁" class="headerlink" title="读锁"></a>读锁</h3><p>如果你的代码只读数据，可以很多人同时读，但不能同时写，那就上读锁</p><h3 id="写锁"><a href="#写锁" class="headerlink" title="写锁"></a>写锁</h3><p>如果你的代码修改数据，只能有一个人在写，且不能同时读取，那就上写锁。总之，读的时候上读锁，写的时候上写锁。<br>Java中读写锁有个接口：java.util.concurrent.locks.ReadWriteLock，也有具体的实现ReentrantReadWriteLock。</p><h2 id="共享锁和独占锁"><a href="#共享锁和独占锁" class="headerlink" title="共享锁和独占锁"></a>共享锁和独占锁</h2><blockquote><p>java 并发包提供的加锁模式分为独占锁和共享锁</p></blockquote><h3 id="独占锁"><a href="#独占锁" class="headerlink" title="独占锁"></a>独占锁</h3><p>独占锁模式下，每次只能有一个线程能持有锁，ReentrantLock 就是以独占方式实现的互斥锁。独占锁是一种悲观保守的加锁策略，它避免了读/读冲突，如果某个只读线程获取锁，则其他读线程都只能等待，这种情况下就限制了不必要的并发性，因为读操作并不会影响数据的一致性。</p><h3 id="共享锁"><a href="#共享锁" class="headerlink" title="共享锁"></a>共享锁</h3><p>共享锁则允许多个线程同时获取锁，并发访问 共享资源，如：ReadWriteLock。共享锁则是一种乐观锁，它放宽了加锁策略，允许多个执行读操作的线程同时访问共享资源。</p><ol><li>AQS 的内部类 Node 定义了两个常量 SHARED 和 EXCLUSIVE，他们分别标识 AQS 队列中等待线程的锁获取模式。</li><li>java 的并发包中提供了 ReadWriteLock，读-写锁。它允许一个资源可以被多个读操作访问，或者被一个 写操作访问，但两者不能同时进行。</li></ol><h2 id="公平锁与非公平锁"><a href="#公平锁与非公平锁" class="headerlink" title="公平锁与非公平锁"></a>公平锁与非公平锁</h2><h3 id="公平锁（-Fair-）"><a href="#公平锁（-Fair-）" class="headerlink" title="公平锁（ Fair ）"></a>公平锁（ Fair ）</h3><blockquote><p>加锁前检查是否有排队等待的线程，优先排队等待的线程，先来先得</p></blockquote><h3 id="非公平锁（-Nonfair-）"><a href="#非公平锁（-Nonfair-）" class="headerlink" title="非公平锁（ Nonfair ）"></a>非公平锁（ Nonfair ）</h3><blockquote><p>加锁时不考虑排队等待问题，直接尝试获取锁，获取不到自动到队尾等待</p></blockquote><ol><li>非公平锁性能比公平锁高 5~10 倍，因为公平锁需要在多核的情况下维护一个队列</li><li>Java 中的 synchronized 是非公平锁，ReentrantLock 默认的 lock()方法采用的是非公平锁。</li></ol><h2 id="偏向锁-轻量级锁-重量级锁"><a href="#偏向锁-轻量级锁-重量级锁" class="headerlink" title="偏向锁/轻量级锁/重量级锁"></a>偏向锁/轻量级锁/重量级锁</h2><blockquote><p>锁可以从偏向锁升级到轻量级锁，再升级到重量级锁。这种升级过程叫做锁膨胀。<br>【但是锁的升级是单向的，也就是说只能从低到高升级，不会出现锁的降级】</p></blockquote><table><thead><tr><th>锁</th><th>优点</th><th>缺点</th><th>使用场景</th></tr></thead><tbody><tr><td>偏向锁</td><td>加锁和解锁不需要额外的消耗，和执行非同步方法比仅存在纳秒级的差距。</td><td>如果线程间存在锁竞争，会带来额外的锁撤销的消耗。</td><td>适用于只有一个线程访问同步块场景。</td></tr><tr><td>轻量级锁</td><td>竞争的线程不会阻塞，提高了程序的响应速度。</td><td>如果始终得不到锁竞争的线程使用自旋会消耗CPU。</td><td>追求响应时间。同步块执行速度非常快。</td></tr><tr><td>重量级锁</td><td>线程竞争不使用自旋，不会消耗CPU。</td><td>线程阻塞，响应时间缓慢。</td><td>追求吞吐量。同步块执行速度较长。</td></tr></tbody></table><h3 id="偏向锁"><a href="#偏向锁" class="headerlink" title="偏向锁"></a>偏向锁</h3><p>Hotspot 的作者经过以往的研究发现大多数情况下锁不仅不存在多线程竞争，而且总是由同一线程多次获得。<strong>偏向锁的目的是在某个线程获得锁之后，消除这个线程锁重入（CAS）的开销，看起来让这个线程得到了偏护。</strong>引入偏向锁是为了在无多线程竞争的情况下尽量减少不必要的轻量级锁执行路径，因为轻量级锁的获取及释放依赖多次 CAS 原子指令，<strong>而偏向锁只需要在置换ThreadID 的时候依赖一次 CAS 原子指令</strong>（由于一旦出现多线程竞争的情况就必须撤销偏向锁，所以偏向锁的撤销操作的性能损耗必须小于节省下来的 CAS 原子指令的性能消耗）。上面说过，<strong>轻量级锁是为了在线程交替执行同步块时提高性能，而偏向锁则是在只有一个线程执行同步块时进一步提高性能。</strong></p><h3 id="轻量级锁"><a href="#轻量级锁" class="headerlink" title="轻量级锁"></a>轻量级锁</h3><p>“轻量级”是相对于使用操作系统互斥量来实现的传统锁而言的。但是，首先需要强调一点的是，轻量级锁并不是用来代替重量级锁的，它的本意是在没有多线程竞争的前提下，减少传统的重量级锁使用产生的性能消耗。在解释轻量级锁的执行过程之前，先明白一点，<strong>轻量级锁所适应的场景是线程交替执行同步块的情况，如果存在同一时间访问同一锁的情况，就会导致轻量级锁膨胀为重量级锁。</strong></p><h3 id="重量级锁-Mutex-Lock"><a href="#重量级锁-Mutex-Lock" class="headerlink" title="重量级锁(Mutex Lock)"></a>重量级锁(Mutex Lock)</h3><p>Synchronized 是通过对象内部的一个叫做监视器锁（monitor）来实现的。但是监视器锁本质又是依赖于底层的操作系统的 Mutex Lock 来实现的。而操作系统实现线程之间的切换这就需要从用户态转换到核心态，这个成本非常高，状态之间的转换需要相对比较长的时间，这就是为什么Synchronized 效率低的原因。因此，这种依赖于操作系统 Mutex Lock 所实现的锁我们称之为“重量级锁”。JDK 中对 Synchronized 做的种种优化，其核心都是为了减少这种重量级锁的使用。JDK1.6 以后，为了减少获得锁和释放锁所带来的性能消耗，提高性能，引入了“轻量级锁”和“偏向锁”。</p><h2 id="分段锁"><a href="#分段锁" class="headerlink" title="分段锁"></a>分段锁</h2><blockquote><p>分段锁并非一种实际的锁，而是一种思想<br>ConcurrentHashMap的segment是学习分段锁的最好实践</p></blockquote><p>HashTable容器在竞争激烈的并发环境下表现出效率低下的原因是所有访问HashTable的线程都必须竞争同一把锁，假如容器里有多把锁，每一把锁用于锁容器其中一部分数据，那么当多线程访问容器里不同数据段的数据时，线程间就不会存在锁竞争，从而可以有效提高并发访问效率，这就是ConcurrentHashMap所使用的锁分段技术。<strong>首先将数据分成一段一段地存储，然后给每一段数据配一把锁，当一个线程占用锁访问其中一个段数据的时候，其他段的数据也能被其他线程访问</strong></p>]]></content>
    
    <summary type="html">
    
      可重入锁/读写锁/共享锁独占锁/公平锁非公平锁/ 偏向锁/轻量级锁/重量级锁...
    
    </summary>
    
      <category term="并发编程" scheme="http://blog.linzhongtai.cn/categories/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="并发编程" scheme="http://blog.linzhongtai.cn/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
      <category term="重温" scheme="http://blog.linzhongtai.cn/tags/%E9%87%8D%E6%B8%A9/"/>
    
      <category term="锁" scheme="http://blog.linzhongtai.cn/tags/%E9%94%81/"/>
    
  </entry>
  
  <entry>
    <title>重温系列之多线程并发：AtomicInteger</title>
    <link href="http://blog.linzhongtai.cn/2019/04/%E9%87%8D%E6%B8%A9%E7%B3%BB%E5%88%97%E4%B9%8B%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%B9%B6%E5%8F%91%EF%BC%9AAtomicInteger/"/>
    <id>http://blog.linzhongtai.cn/2019/04/重温系列之多线程并发：AtomicInteger/</id>
    <published>2019-04-01T09:42:33.000Z</published>
    <updated>2019-04-01T09:42:33.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><blockquote><p>此处 AtomicInteger，一个提供原子操作的 Integer 的类，常见的还有AtomicBoolean、AtomicInteger、AtomicLong、AtomicReference 等，他们的实现原理相同，区别在与运算对象类型的不同。令人兴奋地，还可以通过 AtomicReference<v>将一个对象的所有操作转化成原子操作。</v></p></blockquote><p><strong>在多线程程序中，诸如++i 或 i++等运算不具有原子性，是不安全的线程操作之一。</strong>通常我们会使用 synchronized 将该操作变成一个原子操作，但JVM为此类操作特意提供了一些同步类，使得使用更方便，且使程序运行效率变得更高。通过相关资料显示，通常AtomicInteger的性能是 ReentrantLock 的好几倍。</p>]]></content>
    
    <summary type="html">
    
      AtomicInteger，一个提供原子操作的 Integer 的类
    
    </summary>
    
      <category term="并发编程" scheme="http://blog.linzhongtai.cn/categories/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="并发编程" scheme="http://blog.linzhongtai.cn/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
      <category term="重温" scheme="http://blog.linzhongtai.cn/tags/%E9%87%8D%E6%B8%A9/"/>
    
  </entry>
  
</feed>
